/*
	Redactor v8.0.2
	Updated: August 18, 2012
	
	http://redactorjs.com/
	
	Copyright (c) 2009-2012, Imperavi Inc.
	License: http://redactorjs.com/license/
	
	Usage: $('#content').redactor();
*/
eval(function(p,a,c,k,e,d){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--){d[e(c)]=k[c]||e(c)}k=[function(e){return d[e]}];e=function(){return'\\w+'};c=1};while(c--){if(k[c]){p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c])}}return p}('v 2a=["(6(){11 49=24;11 14={50:6(8,10){5 10.58(8)\\gF},57:6(8,10){7(8.58!=12){5 8.58(10)\\ea}46{5 8.57(10)}},55:6(8,18,10,20){7(8===10){5 18\\5Q=20}7(14.29(8)\\1A\\f7.29(10)){5 14.50(8,10)}7(14.29(8)\\1A\\1A!14.29(10)){5!14.55(10,20,8,18)}7(!14.57(8,10)){5 14.50(8,10)}7(8.47.85\\5Q=18){5 40}7(8.47[18]===10){5 0\\5Q=20}5 14.50(8.47[18],10)},29:6(61){5(61!=12?61.93==3:40)},81:6(41){11 62=0;88(41=41.59){62++}5 62}};11 4=49.4=(6(){6 4(2){24.2=2}4.34.31=6(){5 4.31(24.2)};4.34.37=6(){5 4.37(24.2)};4.34.38=6(){5 4.38(24.2)};4.34.45=6(){5 4.45(24.2)};4.34.44=6(){5 4.44(24.2)};4.34.52=6(25,26,23,22){5 4.52(24.2,25,26,23,22)};4.34.51=6(){5 4.51(24.2)};5 4})();7(49.35){4.67=43;4.31=6(2){11 9;5(9=2.35())\\1A\\1A(9.63!=12)\\1A\\1A(9.36!=12)};4.37=6(2){11 9;7(!((9=2.35())\\1A\\1A(9.36!=12))){5 12}5[9.36,9.97]};4.38=6(2){11 9;7(!((9=2.35())\\1A\\1A(9.63!=12))){5 12}5[9.63,9.91]};4.45=6(2){11 8,10,18,20,27,28;7(!4.31(2)){5 12}27=4.37(2),8=27[0],18=27[1];28=4.38(2),10=28[0],20=28[1];7(14.55(8,18,10,20)){5[8,18]}5[10,20]};4.44=6(2){11 8,10,18,20,27,28;7(!4.31(2)){5 12}27=4.37(2),8=27[0],18=27[1];28=4.38(2),10=28[0],20=28[1];7(14.55(8,18,10,20)){5[10,20]}5[8,18]};4.52=6(2,25,26,23,22){11 9=2.35();7(!9){5}7(23==12){23=25}7(22==12){22=26}7(9.60\\1A\\eh.79){9.60(25,26);9.79(23,22)}46{54=2.15.56();54.ep(25,26);54.et(23,22);71{9.73()}80(41){}9.98(54)}};4.51=6(2){71{11 9=2.35();7(!9){5}9.73()}80(41){}}}46 7(49.15.39){11 69=6(42,32,30){11 19,13,21,33,64;13=42.90(\\9j\\1W);19=32.g8();19.60(30);64=19.77();88(43){64.86(13,13.59);19.82(13);7(!(19.87((30?\\5R\\1W:\\8B\\1W),32)\\gz\\1A\\1A(13.59!=12))){99}}7(19.87((30?\\5R\\1W:\\8B\\1W),32)===-1\\1A\\gq.84){19.74((30?\\g3\\1W:\\9a\\1W),32);21=13.84;33=19.fD.85}46{21=13.48;33=14.81(13)}13.48.72(13);5[21,33]};11 68=6(42,32,30,21,33){11 36,65,19,13,53;53=0;36=14.29(21)?21:21.47[33];65=14.29(21)?21.48:21;7(14.29(21)){53=33}13=42.90(\\9j\\1W);65.86(13,36||12);19=42.76.75();19.82(13);13.48.72(13);32.74((30?\\5R\\1W:\\9a\\1W),19);5 32[30?\\dP\\1W:\\bK\\1W](\\dz\\1W,53)};4.67=43;4.31=6(2){11 17;2.70();7(!2.15.39){5 40}17=2.15.39.56();5 17\\1A\\cr.77().15===2.15};4.45=6(2){11 17;2.70();7(!4.31(2)){5 12}17=2.15.39.56();5 69(2.15,17,43)};4.44=6(2){11 17;2.70();7(!4.31(2)){5 12}17=2.15.39.56();5 69(2.15,17,40)};4.37=6(2){5 4.45(2)};4.38=6(2){5 4.44(2)};4.52=6(2,25,26,23,22){7(23==12){23=25}7(22==12){22=26}11 17=2.15.76.75();68(2.15,17,40,23,22);68(2.15,17,43,25,26);5 17.96()};4.51=6(2){5 2.15.39.95()}}46{4.67=40}}).94(24);","|","cq","||cs||3G|D|u|q|ct|cv|cu|v|1i|cp|co|K||cj|ci|5y|ck|cl|cn|cm|o|cw|cx|cH|cG|cI|cJ|cL|cK|2g|6S|1h|3l|6D|6G|2b|x|e|cF|L|cE|cz|B|6o|2R|cy|cA|cB|as|cD|r|cC|3O|ch|cg|bV|4A|d|k|bU|4H|bW|bX|bZ|bY|bT|1E|6E|aK|af|bS|bN|1S|aj|bM|4z|6R|bL|aQ|bO|bP|3w|bR|bQ|4d|a|5m|c0|c1|5j|9D|cb|2S|ca|5B|cc|cd|1p|cf|ce|c9|c8|c3|c2","H","","\\c4+","\\c5","g"];c7(u(h,b,j,f,g,i){g=u(a){D a};q(!2a[5][2a[4]](/^/,3q)){4d(j--){i[j]=f[j]||j}f=[u(a){D i[a]}];g=u(){D 2a[6]};j=1}4d(j--){q(f[j]){h=h[2a[4]](2H 4b(2a[7]+g(j)+2a[7],2a[8]),f[j])}}D h}(2a[0],10,c6,2a[3][2a[2]](2a[1]),0,{}));q(Q 4O==="1g"){v 4O={}}v C={N:"cM",1K:"3n 7C...",2L:"3n 7u...",16:"6O",2w:"6M",aq:"3n 6M ...",4l:"cN",3x:"dx",aF:"dw",aD:"dy",4K:"7E",9M:"4N 1",9Q:"4N 2",a3:"4N 3",9X:"4N 4",3d:"dB",3f:"dA",3t:"dv 7P",2B:"du 7P",4u:"do 7N",4t:"dn 7N",3g:"dp",3r:"dq",3M:"ds",4w:"3n",7g:"dr",9h:"4p",5z:"3n 6O...",5x:"4q 6I dC",5w:"4q 6I dD",5A:"4q 6H 6l",5H:"4q 6H 6n",5E:"4p 6H",5C:"4p 6I",5D:"4p 6O",9C:"dN",9P:"dM",5I:"4q 8g",5F:"4p 8g",J:"dR",9d:"dQ",1N:"dL",1z:"6l",4B:"6n",8M:"7u dK 6M",1p:"aN",4c:"7b",dF:"7r",ap:"7C dE 7E",1U:"3n dG...",3E:"9R",dH:"dJ",7h:"dI",ax:"dm 7h",aE:"dk 1U cY",al:"6g 6l",7R:"6g cX",7Q:"6g 6n",7V:"cZ",4J:"3n d0 d2",4v:"d1",7p:"cW",a9:"cV 2w cQ 2H cP"};4g.fn.1V=u(a){D o.1r(u(){v c=$(o);v b=c.T("1V");q(!b){c.T("1V",(b=2H 6A(o,a)))}})};v 6A=u(b,a){o.$el=$(b);q(Q a!=="1g"&&Q a.4o!=="1g"&&a.4o!=="en"&&Q 4O[a.4o]!=="1g"){C=4O[a.4o]}o.y=$.4z({4o:"en",8w:"cO",4h:x,6N:x,6k:x,6s:x,1E:x,4S:L,2o:x,6v:L,7W:L,1u:x,8F:x,8o:L,6u:L,6J:x,7B:60,4E:x,4C:x,3P:x,4V:x,3R:x,7q:x,2d:x,2z:L,3Y:L,8K:["4K","1c","E","U","a","br","p","b","i","cR","cS","2q","1K","2E","2f","1M","6x","8r","2Z","cU","cT","d3","3b","3s","1X","8l","dl","dt","dd","d4","df","de","1J","4K","6y","dg","dh","em","16","1D","1m","4a","2N","1O","8s","6f","6e","6i","6j","9g","8Y"],7Z:{},83:[],2U:["N","|","3x","|","3d","3f","4v","|","4u","4t","3g","3r","|","2L","1K","1U","16","2w","|","3t","2B","|","at","am","7S","9l","|","4J"],8f:["3x","|","3d","3f","4v","|","4u","4t","3g","3r","|","3t","2B"],6B:["#dj","#di","#dc","#db","#d6","#d5","#d7","#d8","#da","#d9","#dS","#bf","#a1","#aX","#aV","#aU","#b0","#b3","#aS","#aR","#bJ","#bw","#bx","#by","#bv","#bq","#bt","#bz","#bA","#bG","#7M","#bE","#b4","#ba","#b9","#b6","#b7","#b8","#bl","#bm","#bj","#7M","#bi","#bB","#bg","#bk","#bn","#bd","#bb","#bo","#bp","#bD","#bF","#bs","#aT","#a1","#b1","#aY","#aW","#aZ","#bu","#bc","#bh","#be","#b5","#bC"],5a:"<p><br /></p>",5i:"<p>&1Q;</p>",3h:x,4k:L,bI:3q()+\'<Z F="bH" 3X="4T" 3p="" 5v="5t/Z-T"><U>b2 (dO)</U><X 1C="1p" F="7f" O="2v" /><E 1B="3C-1L: ez;"><X 1C="1U" F="3u" 1v="1U" /></E></Z>\',fC:3q()+"<U>"+C.J+\'</U><X F="5P" O="2v" /><U>\'+C.2w+\'</U><X F="2J" O="2v" /><U>\'+C.9d+\'</U><2S F="5S"><2u 1P="1N">\'+C.1N+\'</2u><2u 1P="1z">\'+C.1z+\'</2u><2u 1P="4B">\'+C.4B+\'</2u></2S><E F="4r"><a Y="1F:1w(1i);" F="9N" 1B="3I: #fE;">\'+C.9h+\'</a><1c O="4s"><X 1C="3S" 1v="7g" F="a2" 1P="\'+C.7g+\'" /><a Y="1F:1w(1i);" F="3z">\'+C.3M+"</a></1c></E>",fH:3q()+\'<E F="2A"><a Y="1F:1w(1i);" O="3k">\'+C.3E+\'</a><a Y="1F:1w(1i);">\'+C.7h+\'</a><a Y="1F:1w(1i);">\'+C.2w+\'</a></E><Z F="fG" 3X="4T" 3p="" 5v="5t/Z-T"><E F="8a" O="2j"><X 1C="1U" F="3u" 1v="1U" /></E><E F="7s" O="2j" 1B="2D: 1N;"><E F="6F"></E></E></Z><E F="7n" O="2j" 1B="2D: 1N;"><U>\'+C.8M+\'</U><X 1v="2J" F="2J" O="2v"  /></E><E F="4r"><1c O="4s"><X 1C="3S" 1v="3E" F="av" 1P="\'+C.4w+\'" /><a Y="1F:1w(1i);" F="3z">\'+C.3M+"</a></1c></E>",fA:3q()+\'<Z F="fz" 3X="4T" 3p=""><E F="2A"><a Y="1F:1w(1i);" O="3k">7r</a><a Y="1F:1w(1i);">7b</a><a Y="1F:1w(1i);">\'+C.7p+\'</a></E><X 1C="7k" F="3V" 1P="1" /><E O="2j" F="8a"><U>7r</U><X F="4U" O="2v"  /><U>\'+C.1p+\'</U><X O="2v 5e" F="aM" /><U><X 1C="fu" F="7i"> \'+C.a9+\'</E><E O="2j" F="7s" 1B="2D: 1N;"><U>7b</U><X F="6V" O="2v" /><U>\'+C.1p+\'</U><X O="2v 5e" F="ah" /></E><E O="2j" F="7n" 1B="2D: 1N;"><U>\'+C.7p+\'</U><X O="2v" F="6X"  /><U>\'+C.1p+\'</U><X O="2v 5e" F="ad" /></E></Z><E F="4r"><1c O="4s"><X 1C="3S" F="9B" 1P="\'+C.4w+\'" /><a Y="1F:1w(1i);" F="3z">\'+C.3M+"</a></1c></E>",fv:3q()+"<U>"+C.9C+\'</U><X 2Y="5" 1P="2" F="5V" /><U>\'+C.9P+\'</U><X 2Y="5" 1P="3" F="9p" /><E F="4r"><1c O="4s"><X 1C="3S" 1v="3E" F="9x" 1P="\'+C.4w+\'" /><a Y="1F:1w(1i);" F="3z">\'+C.3M+"</a></1c></E>",fX:3q()+\'<Z F="fM"><U>\'+C.ap+\'</U><2C F="5L" 1B="2i: 99%; 1s: fQ;"></2C></Z><E F="4r"><1c O="4s"><X 1C="3S" F="a6" 1P="\'+C.4w+\'" /><a Y="1F:1w(1i);" F="3z">\'+C.3M+"</a></1c></E>",1x:{N:{J:C.N,1e:"8T"},3x:{J:C.3x,1e:"1k",4y:{p:{J:C.aF,1l:"2p"},2Z:{J:C.aD,1l:"2p",2n:"gm"},1J:{J:C.4K,1l:"2p",2n:"fR"},6f:{J:C.9M,1l:"2p",2n:"fS"},6e:{J:C.9Q,1l:"2p",2n:"fP"},6i:{J:C.a3,1l:"2p",2n:"fO"},6j:{J:C.9X,1l:"2p",2n:"fL"}}},3d:{J:C.3d,1l:"3d"},3f:{J:C.3f,1l:"3f"},4v:{J:C.4v,1l:"fN"},4u:{J:"&fT; "+C.4u,1l:"92"},4t:{J:"1. "+C.4t,1l:"9b"},3g:{J:"< "+C.3g,1l:"3g"},3r:{J:"> "+C.3r,1l:"3r"},2L:{J:C.2L,1e:"aw"},1K:{J:C.1K,1e:"9z"},1U:{J:C.1U,1e:"ak"},16:{J:C.16,1e:"1k",4y:{5z:{J:C.5z,1e:"9F"},fU:{1v:"5c"},5x:{J:C.5x,1e:"9V"},5w:{J:C.5w,1e:"9U"},5A:{J:C.5A,1e:"9L"},5H:{J:C.5H,1e:"9K"},g0:{1v:"5c"},5I:{J:C.5I,1e:"9W"},5F:{J:C.5F,1e:"6b"},g1:{1v:"5c"},5E:{J:C.5E,1e:"9I"},5C:{J:C.5C,1e:"9s"},5D:{J:C.5D,1e:"9t"}}},2w:{J:C.2w,1e:"1k",4y:{2w:{J:C.aq,1e:"9v"},4l:{J:C.4l,1l:"4l"}}},3t:{J:C.3t,1e:"1k"},2B:{J:C.2B,1e:"1k"},at:{1l:"fZ",J:C.al},am:{1l:"fY",J:C.7R},7S:{1l:"fV",J:C.7Q},9l:{1l:"fW",J:C.7V},4J:{1l:"8n",J:C.4J}}},a,o.$el.T());o.4j=[];o.5l()};6A.6S={5l:u(){o.1s=o.$el.V("1s");o.2i=o.$el.V("2i");q(o.y.7W===x&&o.2P()){o.6p(L);D x}q(o.y.1u){o.y.2U=o.y.8f}B{q(o.y.1x!==x){q(o.y.6v===x){v a=o.y.2U.4i("N");v b=o.y.2U[a+1];o.y.2U.8b(a,1);q(Q b!=="1g"&&b==="|"){o.y.2U.8b(a,1)}}$.4z(o.y.1x,o.y.7Z);$.1r(o.y.83,$.G(u(c,d){o.y.2U.6Q(d)},o))}}o.6p();o.8y();o.7H();q(o.2P(L)===x){o.$I.2W("fK",$.G(u(c){o.8G();q(o.y.4S===L){o.5d=K.1S.3D}B{o.5d=o.$I.3D()}v d=o.6C();fJ($.G(u(){v e=o.6C();o.$I.1b(d);o.2T();v f=o.8R(e);o.9c(f)},o),1)},o))}o.2V();o.6K();q(o.y.6J!==x){o.7z()}o.2z();o.4R();q($.1n.4f){K.1f("fw",x,x);K.1f("fx",x,x)}q(o.y.1E){o.$I.1E()}q(o.y.2o){o.6q();$(K).fy($.G(o.6q,o))}q(Q o.y.4h==="u"){o.y.4h(o)}},2e:u(b,a){b.2y();o.1f(a,x)},2V:u(){o.$I.2V($.G(u(b){v a=b.5p||b.7G;q(Q o.y.6N==="u"){o.y.6N(o,b)}q(a===8||a===46){o.2z();D o.8u(b)}q(a===13&&!b.4e&&!b.7X&&!b.8L){D o.8i(b)}o.1d()},o))},6K:u(){o.$I.6K($.G(u(f){v a=f.5p||f.7G;v b=o.2F();v d=x;v c=f.7X||f.8L;q(b&&$(b).1j(0).1G==="8m"){d=L}q(Q o.y.6k==="u"){o.y.6k(o,f)}q(c){q(a===90){q(o.y.3h!==x){f.2y();o.8E()}B{o.2e(f,"fr")}}B{q(a===90&&f.4e){o.2e(f,"fs")}B{q(a===77){o.2e(f,"ft")}B{q(a===66){o.2e(f,"3d")}B{q(a===73){o.2e(f,"3f")}B{q(a===74){o.2e(f,"92")}B{q(a===75){o.2e(f,"9b")}B{q(a===76){o.2e(f,"fF")}B{q(a===72){o.2e(f,"fB")}}}}}}}}}}q(!c&&a!==90){o.y.3h=x}q(d===L&&a===13){f.2y();o.4Z(K.8q("\\r\\n"))}q(!f.4e&&a===9){q(d===x){o.2e(f,"3r")}B{f.2y();o.4Z(K.8q("\\t"))}}B{q(f.4e&&a===9){o.2e(f,"3g")}}q($.1n.6W&&5M.5N.4i("gu")===-1){D o.8p(f,a)}},o))},6p:u(b){q(b!==L){o.$2G=$(\'<E O="gv"></E>\');q(o.y.1u){o.1u=$(\'<E O="6r" 1B="2D: 1N;"></E>\')}o.4m=L;q(o.$el.1j(0).1G==="8C"){o.$I=$("<E></E>")}B{o.4m=x;o.$I=o.$el;o.$el=$(\'<2C 1v="\'+o.$I.R("F")+\'"></2C>\').V("1s",o.1s)}o.$I.1Z("6t").R("8z",L).R("gs",o.y.8w);q(o.y.8F===L){o.$I.1Z("8A")}q(o.y.4S===x){o.$I.V("1s",o.1s)}o.$el.1H();v c="";q(o.4m){c=o.$el.M();o.$2G.8I(o.$el).1b(o.$I).1b(o.$el)}B{c=o.$I.N();o.$2G.8I(o.$I).1b(o.$el).1b(o.$I)}c=o.8t(c);o.$I.N(c);q(o.4m===x){o.1d()}}B{q(o.$el.1j(0).1G!=="8C"){v c=o.$el.M();v a=$(\'<2C 1v="\'+o.$I.R("F")+\'"></2C>\').V("1s",o.1s).M(c);o.$el.1H();o.$el.2r(a)}}},8y:u(){q(o.y.1u===x){D x}o.1u.1H();o.$I.2W("3a",$.G(u(a){o.8x(a)},o));o.$I.2W("3i",$.G(u(){o.1u.1H()},o))},8x:u(c){$(".6r").1H();v a=o.1u.gr();v b=c.go;q($(K).2i()<(b+a)){b=b-a}o.1u.V({1z:b+"2c",1L:(c.gp+$(K).3D()+14)+"2c"}).1k()},1d:u(){o.$el.M(o.$I.N())},5k:u(a){o.$I.N(a).1E();o.1d()},4D:u(){q(o.y.4k){D o.$I.N()}B{D o.$el.M()}},5Y:u(a){o.1f("2X",a);o.2z()},9o:u(){v b=o.4D();q(o.4m){o.$2G.2r(o.$el);o.$2G.1T();o.$el.1s(o.1s).M(b).1k()}B{o.$2G.2r(o.$I);o.$2G.1T();o.$I.2k("6t").2k("8A").R("8z",x).N(b).1k()}$(".6r").1T();2M(v a=0;a<o.4j.3w;a++){o.4j[a].1T();gw(o.4j[a])}},2z:u(){q(o.y.2z===x){D x}o.$I.1q("2q").1r($.G(u(a,b){q($.1n.2l){$(b).R("dT","gD")}o.a7(b)},o))},4R:u(){o.$I.1q("16").1a($.G(o.9q,o))},6q:u(){v a=$(K).3D();v b=o.$2G.2g().1L;q(a>b){o.2o=L;o.$1x.V({2K:"2o",2i:"4x%",8H:4x})}B{o.2o=x;o.$1x.V({2K:"gE",2i:"3e",8H:1})}},8G:u(){o.3v();o.y.3h=o.$I.N()},8E:u(){q(o.y.3h===x){D x}o.$I.N(o.y.3h);q(!$.1n.2l){o.2T()}o.y.3h=x},1f:u(d,g){6E{v b;q(d==="2X"&&$.1n.2l){K.2b.3O().aP(g)}B{q(d==="2p"&&$.1n.2l){K.1f(d,x,"<"+g+">")}B{q(d==="4l"){b=o.2F();q($(b).1j(0).1G==="A"){$(b).2Q($(b).1p())}B{K.1f(d,x,g)}}B{q(d==="2p"&&g==="2Z"){b=o.2F();q($(b).1j(0).1G==="8v"){K.1f(d,x,"p")}B{q($(b).1j(0).1G==="P"){v a=$(b).4H();q($(a).1j(0).1G==="8v"){v c=$("<p>"+$(b).N()+"</p>");$(a).2Q(c);o.4Y(c.1j(0))}B{K.1f(d,x,g)}}B{K.1f(d,x,g)}}}B{q(d==="2p"&&g==="1J"){b=o.2F();q($(b).1j(0).1G==="8m"){$(b).2Q("<p>"+$(b).1p()+"</p>")}B{K.1f(d,x,g)}}B{K.1f(d,x,g)}}}}}q(d==="8n"){o.$I.1q("8l").gA("F")}o.1d();q(o.5s()){o.$I.1E()}q(Q o.y.6s==="u"){o.y.6s(o,d)}q(o.y.1u){o.1u.1H()}}6R(f){}},8i:u(c){q($.1n.6W){v b=o.2F();q(b.9H==="8j"&&b.2n==="6t"){c.2y();v a=$(o.ai());q(a.1j(0).1G==="8j"&&(a.N()===""||a.N()==="<br>")){v d=$("<p>").1b(a.3K().1j(0).6o);a.2Q(d);d.N("<br />");o.4Y(d.1j(0));o.1d();D x}B{o.1d()}q(o.y.8o){o.$I.az()}}B{o.1d();D L}}B{o.1d();D L}},8p:u(c,b){q(c.4e&&b===13){c.2y();v a=$("<1c><br /></1c>");o.4Z(a.1j(0));o.1d();D x}B{D L}},8u:u(d){v b=$.3U(o.$I.N());q($.1n.4f){b=b.H(/<br>/i,"")}q(b===""){d.2y();v a=o.y.5a;q($.1n.4f){a=o.y.5i}v c=$(a).1j(0);o.$I.N(c);o.4Y(c);o.1d();D x}B{o.1d()}},8t:u(c){c=$.3U(c);q(c===""){q(!$.1n.4f){D o.y.5a}B{D o.y.5i}}q(o.y.6u){c=c.H(/<E(.*?)>([\\w\\W]*?)<\\/E>/gi,"<p>$2</p>")}v d=u(f,g,e){D f.H(2H 4b(g,"g"),e)};v a=u(f,e){D d(c,f,e)};v b="(16|1O|8s|6h|gn|2N|1D|1m|4a|E|dl|dd|dt|3b|3s|1X|1J|2S|Z|2Z|8J|g9|1B|ga|1M|X|8r|p|h[1-6])";c+="\\n";a("<br />\\\\s*<br />","\\n\\n");a("(<"+b+"[^>]*>)","\\n$1");a("(</"+b+">)","$1\\n\\n");a("\\r\\n|\\r","\\n");a("\\n\\n+","\\n\\n");a("\\n?((.|\\n)+?)$","<p>$1</p>\\n");a("<p>\\\\s*?</p>","");a("<p>(<E[^>]*>\\\\s*)","$1<p>");a("<p>([^<]+)\\\\s*?(</(E|8J|Z)[^>]*>)","<p>$1</p>$2");a("<p>\\\\s*(</?"+b+"[^>]*>)\\\\s*</p>","$1");a("<p>(<1X.+?)</p>","$1");a("<p>\\\\s*(</?"+b+"[^>]*>)","$1");a("(</?"+b+"[^>]*>)\\\\s*</p>","$1");a("(</?"+b+"[^>]*>)\\\\s*<br />","$1");a("<br />(\\\\s*</?(p|1X|E|dl|dd|dt|4a|1J|1m|3b|3s)[^>]*>)","$1");q(c.4i("<1J")!=-1){a("(<1J(.|\\n)*?>)((.|\\n)*?)</1J>",u(h,g,f,e){D d(g,"\\\\\\\\([\'\\"\\\\\\\\])","$1")+d(d(d(e,"<p>","\\n"),"</p>|<br />",""),"\\\\\\\\([\'\\"\\\\\\\\])","$1")+"</1J>"})}D a("\\n</p>$","</p>")},5O:u(b){v c=o.y.8K;v a=/<\\/?([a-z][a-g7-9]*)\\b[^>]*>/gi;D b.H(a,u(e,d){D $.g4(d.g5(),c)>"-1"?e:""})},9c:u(a){a=a.H(/<!--[\\s\\S]*?-->|<\\?(?:g6)?[\\s\\S]*?\\?>/gi,"");a=a.H(/(&1Q;){1,}/gi,"&1Q;");a=a.H(/<b\\gd="gk-6v-gl(.*?)">([\\w\\W]*?)<\\/b>/gi,"$2");a=o.5O(a);a=a.H(/<1m><br><\\/1m>/gi,"[1m]");a=a.H(/<a(.*?)>([\\w\\W]*?)<\\/a>/gi,"[a$1]$2[/a]");a=a.H(/<2f(.*?)>([\\w\\W]*?)<\\/2f>/gi,"[2f$1]$2[/2f]");a=a.H(/<1K(.*?)>([\\w\\W]*?)<\\/1K>/gi,"[1K$1]$2[/1K]");a=a.H(/<2E(.*?)>([\\w\\W]*?)<\\/2E>/gi,"[2E$1]$2[/2E]");a=a.H(/<1M(.*?)>([\\w\\W]*?)<\\/1M>/gi,"[1M$1]$2[/1M]");a=a.H(/<2q(.*?)>/gi,"[2q$1]");a=a.H(/<(\\w+)([\\w\\W]*?)>/gi,"<$1>");a=a.H(/<[^\\/>][^>]*>(\\s*|\\t*|\\n*|&1Q;|<br>)<\\/[^>]+>/gi,"");a=a.H(/<[^\\/>][^>]*>(\\s*|\\t*|\\n*|&1Q;|<br>)<\\/[^>]+>/gi,"");a=a.H(/\\[1m\\]/gi,"<1m><br></1m>");a=a.H(/\\[a(.*?)\\]([\\w\\W]*?)\\[\\/a\\]/gi,"<a$1>$2</a>");a=a.H(/\\[2f(.*?)\\]([\\w\\W]*?)\\[\\/2f\\]/gi,"<2f$1>$2</2f>");a=a.H(/\\[1K(.*?)\\]([\\w\\W]*?)\\[\\/1K\\]/gi,"<1K$1>$2[/1K>");a=a.H(/\\[2E(.*?)\\]([\\w\\W]*?)\\[\\/2E\\]/gi,"<2E$1>$2[/2E>");a=a.H(/\\[1M(.*?)\\]([\\w\\W]*?)\\[\\/1M\\]/gi,"<1M$1>$2</1M>");a=a.H(/\\[2q(.*?)\\]/gi,"<2q$1>");q(o.y.6u){a=a.H(/<E(.*?)>([\\w\\W]*?)<\\/E>/gi,"<p>$2</p>")}a=a.H(/<1c>([\\w\\W]*?)<\\/1c>/gi,"$1");a=a.H(/\\n{3,}/gi,"\\n");a=a.H(/<p><p>/g,"<p>");a=a.H(/<\\/p><\\/p>/g,"</p>");o.1f("2X",a);q(o.y.4S===L){$(K.1S).3D(o.5d)}B{o.$I.3D(o.5d)}},8h:u(b){v a=[];v c=b.9T(/<1J(.*?)>([\\w\\W]*?)<\\/1J>/gi);q(c!==1i){$.1r(c,u(d,e){b=b.H(e,"9i"+d);a.6Q(e)})}b=b.H(/\\s{2,}/g," ");b=b.H(/\\n/g," ");b=b.H(/[\\t]*/g,"");b=b.H(/\\n\\s*\\n/g,"\\n");b=b.H(/^[\\s\\n]*/g,"");b=b.H(/[\\s\\n]*$/g,"");b=b.H(/>\\s+</g,"><");q(a){$.1r(a,u(d,e){b=b.H("9i"+d,e)});a=[]}D b},8S:u(a){a=a.H(/<1X/g,"\\t<1X");a=a.H(/<1D/g,"\\t<1D");a=a.H(/<1m/g,"\\t\\t<1m");a=a.H(/<\\/1D>/g,"\\t</1D>");D a},8W:u(d){v c=["<1J></1J>","<2Z>\\\\s*</2Z>","<em>\\\\s*</em>","<3b></3b>","<3s></3s>","<1X></1X>","<16></16>","<1D></1D>","<1c>\\\\s*<1c>","<1c>&1Q;<1c>","<b>\\\\s*</b>","<b>&1Q;</b>","<p>\\\\s*</p>","<p>&1Q;</p>","<p>\\\\s*<br>\\\\s*</p>","<E>\\\\s*</E>","<E>\\\\s*<br>\\\\s*</E>"];2M(v b=0;b<c.3w;++b){v a=c[b];d=d.H(2H 4b(a,"gi"),"")}D d},8V:u(c){v d="\\r\\n";v e=["<p","<Z","</3b>","</3s>","<8O","<8P","<1M","<6x","<2S","<2u","<X","<2C","<1J","<2Z","<3b","<3s","<1X","<dl","<dt","<dd","<16","<1O","<2N","<6h","</6h>","<4a","<1D","<1m","<6y"];2M(v b=0;b<e.3w;++b){v a=e[b];c=c.H(2H 4b(a,"gi"),d+a)}D c},8U:u(c){v e="\\r\\n";v a=["</p>","</E>","</6f>","</6e>","</6i>","</6j>","</9g>","</8Y>","<br>","<br />","</dl>","</dt>","</dd>","</Z>","</2Z>","</1J>","</8P>","</8O>","</1M>","</6x>","</2C>","</2S>","</2u>","</16>","</1O>","</2N>","</1D>","</1m>","</4a>","</6y>"];2M(v b=0;b<a.3w;++b){v d=a[b];c=c.H(2H 4b(d,"gi"),d+e)}D c},3x:u(a){a=o.8h(a);a=o.8W(a);a=o.8V(a);a=o.8U(a);a=o.8S(a);D a},8T:u(){v a;q(o.y.4k){o.$I.1H();a=o.$I.N();a=$.3U(o.3x(a));o.$el.1s(o.$I.eu()).M(a).1k().1E();o.5G("N");o.y.4k=x}B{o.$el.1H();o.$I.N(o.$el.M());o.$I.1k();q(o.$I.N()===""){q(!$.1n.4f){a=o.y.5a}B{a=o.y.5i}o.5k(a)}o.$I.1E();o.aB("N");o.y.4k=L;o.2z();o.4R()}},7z:u(){eC($.G(u(){$.4T(o.y.6J,{T:o.4D()})},o),o.y.7B*eE)},7H:u(){q(o.y.1x===x){D x}o.$1x=$("<3b>").1Z("eA");q(o.y.1u){$(o.1u).1b(o.$1x);$("1S").5b(o.1u)}B{o.$2G.5b(o.$1x)}$.1r(o.y.2U,$.G(u(e,d){q(d!=="|"&&Q o.y.1x[d]!=="1g"){v f=o.y.1x[d];q(o.y.4V===x&&d==="1U"){D L}v b=$("<1X>");v c=o.7w(d,f);q(d==="2B"||d==="3t"||Q(f.4y)!=="1g"){v g=$(\'<E O="7U" 1B="2D: 1N;">\');q(d==="2B"||d==="3t"){g=o.7J(g,d)}B{g=o.89(g,f.4y)}o.4j.6Q(g.7t($(K.1S)));o.6P=$.G(u(a){o.7T(a,g,d)},o);o.7v=$.G(u(a){o.7L(a,g,d)},o);c.1a(o.7v)}o.$1x.1b($(b).1b(c))}q(d==="|"){o.$1x.1b($(\'<1X O="eg"></1X>\'))}},o));$(K).1a(o.6P);o.$I.1a(o.6P)},7w:u(b,c){v a=$(\'<a Y="1F:1w(1i);" J="\'+c.J+\'" O="aA\'+b+\'"></a>\');q(Q c.1e==="1g"){a.1a($.G(u(){o.1f(c.1l,b)},o))}B{q(c.1e!=="1k"){a.1a($.G(u(d){o[c.1e](d)},o))}}q(Q c.4h!=="1g"){a.1a($.G(u(d){c.4h(o,d,b)},o))}D a},89:u(b,a){$.1r(a,$.G(u(c,f){q(Q(f.2n)==="1g"){f.2n=""}v e;q(Q f.1v!=="1g"&&f.1v==="5c"){e=$(\'<a O="e2">\')}B{e=$(\'<a Y="1F:1w(1i);" O="\'+f.2n+\'">\'+f.J+"</a>");q(Q(f.1e)==="1g"){$(e).1a($.G(u(){o.1f(f.1l,c)},o))}B{$(e).1a($.G(u(d){o[f.1e](d)},o))}}$(b).1b(e)},o));D b},7J:u(j,h){v d;q(h==="2B"){q($.1n.2l){d="8d"}B{d="dU"}}B{d="8e"}$(j).2i(dV);v e=o.y.6B.3w;2M(v c=0;c<e;++c){v a=o.y.6B[c];v g=$(\'<a 4W="\'+a+\'" Y="1F:1w(1i);" O="dW"></a>\').V({dX:a});$(j).1b(g);v f=o;$(g).1a(u(){f.1f(d,$(o).R("4W"));q(d==="8e"){f.$I.1q("8c").2Q(u(){D $(\'<1c 1B="3I: \'+$(o).R("3I")+\';">\'+$(o).N()+"</1c>")})}q($.1n.2l&&d==="8d"){f.$I.1q("8c").2Q(u(){D $(\'<1c 1B="\'+$(o).R("1B")+\'">\'+$(o).N()+"</1c>")})}})}v b=$(\'<a Y="1F:1w(1i);" O="ec"></a>\').N(C.1N);q(h==="2B"){b.1a($.G(o.7O,o))}B{b.1a($.G(o.7K,o))}$(j).1b(b);D j},7O:u(){$(o.2F()).V("ee-3I","eb");o.1d()},7K:u(){$(o.2F()).R("3I","").V("3I","");o.1d()},7L:u(f,g,a){q(o.3Q(a).5T("3Z")){o.4X()}B{o.4X();o.5G(a);o.3Q(a).1Z("3Z");v d=o.3Q(a).2g().1z;q(o.y.1u){v b=o.1u.2g().1L;$(g).V({2K:"6Y",1z:d+"2c",1L:b+30+"2c"}).1k()}B{q(o.y.2o&&o.2o){$(g).V({2K:"2o",1z:d+"2c",1L:"e7"}).1k()}B{v c=o.$1x.2g().1L+30;$(g).V({2K:"6Y",1z:d+"2c",1L:c+"2c"}).1k()}}}},4X:u(){o.$1x.1q("a.3Z").2k("5h").2k("3Z");$(".7U").1H()},7T:u(b,c,a){q(!$(b.1t).5T("3Z")){$(c).2k("5h");o.eF=x;o.4X()}},1h:u(){q(Q 1o.1h!=="1g"){D K.1h()}B{q(Q K.2b!=="1g"){D K.2b.3O()}}},8R:u(b){v a=b.fa(L);v c=K.5m("E");c.5n(a);D c.5o},6C:u(){v a=o.$I.1j(0);v c=K.fb(),b;4d((b=a.fc)){c.5n(b)}D c},3v:u(){o.3j=1i;o.3F=1i;q($.1n.2l&&4F($.1n.ao,10)<9){v a=o.$I.1j(0);o.3j=1o.3G.6D(a);o.3F=1o.3G.6G(a)}B{o.3j=1o.3G.6D(1o);o.3F=1o.3G.6G(1o)}},2T:u(){q(o.3j!==1i&&o.3F!==1i&&o.3j[0].1G!=="f9"){1o.3G.as(1o,o.3j[0],o.3j[1],o.3F[0],o.3F[1])}B{o.$I.1E()}},2F:u(){q(Q 1o.1h!=="1g"){v a=1o.1h();q(a.5f>0){D o.1h().5g(0).ab.2R}B{D x}}B{q(Q K.2b!=="1g"){D o.1h().aj()}}},ai:u(){q(Q 1o.1h!=="1g"){D o.1h().5g(0).ab}B{q(Q K.2b!=="1g"){D o.1h()}}},4Y:u(c){q(Q c==="1g"){D x}6E{v a=K.3O();v b=o.1h();q(b!==1i){a.ag(c);b.5B(a);b.4A(c,0)}o.$I.1E()}6R(d){}},4Z:u(e){q(1o.1h){v f=o.1h();q(f.5f){v b=f.5g(0);b.4A(x);b.f6(e);b=b.fd();b.ag(e);b.4A(x);f.af();f.5B(b)}}B{q(K.2b){v c=(e.5j===1)?e.5r:e.T;v g="fe"+(""+2h.7m()).fl(2);c+=\'<1c F="\'+g+\'"></1c>\';v d=o.1h();d.4A(x);d.aP(c);v a=K.fk(g);d.aQ(a);d.2S();a.2R.aK(a)}}},a5:u(){v d="";q(1o.1h){v e=1o.1h();q(e.5f){v b=K.5m("E");2M(v c=0,a=e.5f;c<a;++c){b.5n(e.5g(c).fj())}d=b.5o}}B{q(K.2b){q(K.2b.1C==="aN"){d=K.2b.3O().ff}}}D d},3Q:u(a){D $(o.$1x.1q("a.aA"+a))},5G:u(a){o.3Q(a).1Z("5h")},aB:u(a){o.3Q(a).2k("5h")},a7:u(e){v f=x;v b=x;v d;v a;v g=$(e).2i()/$(e).1s();v c=10;v h=10;$(e).5u(u(){$(e).V("5y","fg-fh")},u(){$(e).V("5y","fi");f=x});$(e).f3(u(i){i.2y();f=L;b=L;d=2h.3L(i.5X-$(e).eq(0).2g().1z);a=2h.3L(i.5K-$(e).eq(0).2g().1L)});$(e).4n($.G(u(i){f=x;o.1d()},o));$(e).1a($.G(u(i){q(b){o.9O(i)}},o));$(e).f2(u(m){q(f){b=x;v j=2h.3L(m.5X-$(o).eq(0).2g().1z)-d;v i=2h.3L(m.5K-$(o).eq(0).2g().1L)-a;v l=$(e).1s();v n=4F(l,10)+i;v k=n*g;q(k>c){$(e).2i(k)}q(n>h){$(e).1s(n)}d=2h.3L(m.5X-$(o).eq(0).2g().1z);a=2h.3L(m.5K-$(o).eq(0).2g().1L)}})},9F:u(){o.3v();o.3y(C.16,"16",eP,$.G(u(){$("#9x").1a($.G(o.9w,o))},o),u(){$("#5V").1E()})},9w:u(){v k=$("#5V").M();v d=$("#9p").M();v a=$("<E></E>");v b=2h.7F(2h.7m()*7A);v h=$(\'<16 F="16\'+b+\'"><2N></2N></16>\');2M(v e=0;e<k;e++){v j=$("<1D></1D>");2M(v g=0;g<d;g++){v c=$("<1m><br></1m>");$(j).1b(c)}$(h).1b(j)}$(a).1b(h);v f=$(a).N()+"<p></p>";o.2T();o.1f("2X",f);o.1I();o.4R()},9q:u(a){o.$16=$(a.1t).5Z("16");o.$9Y=o.$16.1q("1D");o.$9r=o.$16.1q("1m");o.$9r.2k("4I");o.$2N=$(a.1t).5Z("2N");o.$1O=$(o.$16).1q("1O");o.$4G=$(a.1t);o.$4G.1Z("4I");o.$3N=$(a.1t).5Z("1D")},9t:u(){$(o.$16).1T();o.$16=x;o.1d()},9s:u(){$(o.$3N).1T();o.1d()},9I:u(){v a=$(o.$4G).1j(0).eL;$(o.$16).1q("1D").1r(u(){$(o).1q("1m").eq(a).1T()});o.1d()},9W:u(){q($(o.$16).1q("1O").2Y()!==0){o.6b()}B{v a=$(o.$16).1q("1D").eH().3K();a.1q("1m").N("&1Q;");o.$1O=$("<1O></1O>");o.$1O.1b(a);$(o.$16).5b(o.$1O);o.1d()}},6b:u(){$(o.$1O).1T();o.$1O=x;o.1d()},9V:u(){o.6a("2O")},9U:u(){o.6a("2r")},9L:u(){o.5U("2O")},9K:u(){o.5U("2r")},6a:u(a){v b=$(o.$3N).3K();b.1q("1m").N("&1Q;");q(a==="2r"){$(o.$3N).2r(b)}B{$(o.$3N).2O(b)}o.1d()},5U:u(b){v a=0;o.$4G.1Z("4I");o.$3N.1q("1m").1r(u(c,d){q($(d).5T("4I")){a=c}});o.$9Y.1r(u(c,d){v e=$(d).1q("1m").eq(a);v f=e.3K();f.N("&1Q;");q(b==="2r"){$(e).2r(f)}B{$(e).2O(f)}});o.1d()},9z:u(){o.3v();o.3y(C.1K,"1K",eR,$.G(u(){$("#a6").1a($.G(o.9E,o))},o),u(){$("#5L").1E()})},9E:u(){v a=$("#5L").M();a=o.5O(a);o.2T();o.1f("2X",a);o.1I()},9O:u(d){v a=$(d.1t);v c=a.4H();v b=$.G(u(){$("#5P").M(a.R("7c"));$("#eS").R("Y",a.R("3W"));$("#5S").M(a.V("4Q"));q($(c).1j(0).1G==="A"){$("#2J").M($(c).R("Y"))}$("#9N").1a($.G(u(){o.9Z(a)},o));$("#a2").1a($.G(u(){o.9J(a)},o))},o);o.3y(C.2L,"eZ",f0,b)},9Z:u(a){$(a).1T();o.1I();o.1d()},9J:u(b){v a=$(b).4H();$(b).R("7c",$("#5P").M());v d=$("#5S").M();q(d==="1z"){$(b).V({"4Q":"1z",3C:"0 4L 4L 0"})}B{q(d==="4B"){$(b).V({"4Q":"4B",3C:"0 0 4L 4L"})}B{$(b).V({"4Q":"1N",3C:"0"})}}v c=$.3U($("#2J").M());q(c!==""){q($(a).1j(0).1G!=="A"){$(b).2Q(\'<a Y="\'+c+\'">\'+o.5r(b)+"</a>")}B{$(a).R("Y",c)}}B{q($(a).1j(0).1G==="A"){$(a).2Q(o.5r(b))}}o.1I();o.2z();o.1d()},aw:u(){o.3v();v a=$.G(u(){q(o.y.4E!==x){$.eT(o.y.4E,$.G(u(g){v e={};v i=0;$.1r(g,$.G(u(j,k){q(Q k.4P!=="1g"){i++;e[k.4P]=i}},o));v f=x;$.1r(g,$.G(u(m,n){v l="";q(Q n.J!=="1g"){l=n.J}v j=0;q(!$.aJ(e)&&Q n.4P!=="1g"){j=e[n.4P];q(f===x){f=".3A"+j}}v k=$(\'<2q 3W="\'+n.eW+\'" O="3A 3A\'+j+\'" 4W="\'+n.2L+\'" J="\'+l+\'" />\');$("#6F").1b(k);$(k).1a($.G(o.9S,o))},o));q(!$.aJ(e)){$(".3A").1H();$(f).1k();v h=u(j){$(".3A").1H();$(".3A"+$(j.1t).M()).1k()};v d=$(\'<2S F="fp">\');$.1r(e,u(l,j){d.1b($(\'<2u 1P="\'+j+\'">\'+l+"</2u>"))});$("#6F").2O(d);d.9e(h)}},o))}B{$("#2A a").eq(1).1T()}q(o.y.4C!==x){q(o.y.7q===x&&o.2P()===x){q($("#3u").2Y()!==0){$("#3u").5J({2s:o.y.4C,2d:o.y.2d,1Y:$.G(o.3P,o)})}}o.7e("3u",{3e:L,2s:o.y.4C,1Y:$.G(o.3P,o)})}B{$(".2j").1H();q(o.y.4E===x){$("#2A").1T();$("#7n").1k()}B{v c=$("#2A a");c.eq(0).1T();c.eq(1).1Z("3k");$("#7s").1k()}}$("#av").1a($.G(o.au,o))},o);v b=$.G(u(){q(o.y.4C===x&&o.y.4E===x){$("#2J").1E()}},o);o.3y(C.2L,"2L",eU,a,b,L)},9S:u(a){o.4M(\'<2q 3W="\'+$(a.1t).R("4W")+\'" 7c="\'+$(a.1t).R("J")+\'" />\',L)},au:u(){q($("#2J").M()!==""){v a=\'<2q 3W="\'+$("#2J").M()+\'" />\';o.4M(a,L)}B{o.1I()}},3P:u(a){o.4M(a)},4M:u(b,c){o.2T();q(b!==x){v a="",d="";q(c!==L){d=$.7Y(b);a=\'<p><2q 3W="\'+d.7y+\'" /></p>\'}B{a=b}o.1f("2X",a);q(c!==L&&Q o.y.3P==="u"){o.y.3P(o,d)}}o.1I();o.2z()},9v:u(){o.3v();v a=$.G(u(){o.2m=x;v f=o.1h();v c="",h="",g="";q($.1n.2l){v d=o.2F();q(d.9H==="A"){o.2m=$(d);h=o.2m.1p();c=o.2m.R("Y");g=o.2m.R("1t")}B{q(o.5s()){h=f.1p}B{h=f.3m()}}}B{q(f&&f.3l&&f.3l.2R.1G==="A"){c=f.3l.2R.Y;h=f.3l.2R.1p;g=f.3l.2R.1t;q(f.3m()===""){o.2m=f.3l.2R}}B{h=f.3m()}}$(".5e").M(h);v e=c.H(f4.e8.Y,"");q(c.9A("4c:")===0){o.7d(2);$("#3V").M(2);$("#6V").M(c.H("4c:",""))}B{q(e.9A(/^#/gi)===0){o.7d(3);$("#3V").M(3);$("#6X").M(e.H(/^#/gi,""))}B{$("#4U").M(c)}}q(g==="ae"){$("#7i").R("aG",L)}$("#9B").1a($.G(o.ay,o))},o);v b=u(c){$("#4U").1E()};o.3y(C.2w,"2w",ey,a,b)},ay:u(){v b=$("#3V").M();v a="",d="",c="";q(b==="1"){a=$("#4U").M();d=$("#aM").M();q($("#7i").R("aG")){c="ae"}}B{q(b==="2"){a="4c:"+$("#6V").M();d=$("#ah").M()}B{q(b==="3"){a="#"+$("#6X").M();d=$("#ad").M()}}}o.a8(\'<a Y="\'+a+\'" 1t="\'+c+\'">\'+d+"</a>&1Q;",$.3U(d),a,c)},a8:u(b,e,c,d){o.$I.1E();o.2T();q(e!==""){q(o.2m){$(o.2m).1p(e);$(o.2m).R("Y",c);q(d!==""){$(o.2m).R("1t",d)}o.1d()}B{o.1f("2X",b)}}o.1I()},ak:u(){o.3v();v a=$.G(u(){v b=o.1h();v c="";q(o.5s()){c=b.1p}B{c=b.3m()}$("#7f").M(c);q(o.y.7q===x&&o.2P()===x){$("#3u").5J({2s:o.y.4V,2d:o.y.2d,1Y:$.G(u(d){o.3R(d)},o)})}o.7e("3u",{3e:L,2s:o.y.4V,1Y:$.G(u(d){o.3R(d)},o)})},o);o.3y(C.1U,"1U",fq,a)},3R:u(a){o.2T();q(a!==x){v c=$.7Y(a);v d=$("#7f").M();q(d===""){d=c.fI}v b=\'<a Y="\'+c.7y+\'">\'+d+"</a>";q($.1n.6W&&!!1o.gg){b=b+"&1Q;"}o.1f("2X",b);q(Q o.y.3R==="u"){o.y.3R(o,c)}}o.1I()},3y:u(g,b,d,c,f){q($("#3H").2Y()===0){o.3Y=$(\'<E F="3H" 1B="2D: 1N;"></E>\');$("1S").5b(o.3Y)}q(o.y.3Y){$("#3H").1k();$("#3H").1a($.G(o.1I,o))}q($("#3c").2Y()===0){o.8N=$(\'<E F="3c" 1B="2D: 1N;"><E F="78">&gf;</E><E F="8X"></E><E F="7o"></E></E>\');$("1S").1b(o.8N)}$("#78").1a($.G(o.1I,o));o.3T=$.G(u(h){q(h.5p===27){o.1I()}},o);$(K).2V(o.3T);o.$I.2V(o.3T);$("#7o").N(o.y["ge"+b]);$("#8X").N(g);q($("#2A").2Y()!==0){v e=o;$("#2A a").1r(u(h,j){h++;$(j).1a(u(){$("#2A a").2k("3k");$(o).1Z("3k");$(".2j").1H();$("#2j"+h).1k();$("#3V").M(h);q(e.2P()===x){v i=$("#3c").9f();$("#3c").V("3C-1L","-"+(i+10)/2+"2c")}})})}$("#3z").1a($.G(o.1I,o));q(Q(c)==="u"){c()}v a=$("#3c").9f();q(o.2P()===x){$("#3c").V({2K:"2o",1L:"50%",1z:"50%",2i:d+"2c",1s:"3e",8Z:"3e",gc:"-"+(a+10)/2+"2c",gb:"-"+(d+60)/2+"2c"}).gy("8D");o.8k=$(K.1S).V("6m");$(K.1S).V("6m","7k")}B{$("#3c").V({2K:"2o",2i:"4x%",1s:"4x%",1L:"0",1z:"0",3C:"0",8Z:"gx"}).1k()}q(Q(f)==="u"){f()}},1I:u(){$("#78").3J("1a",o.1I);$("#3c").g2("8D",$.G(u(){$("#7o").N("");q(o.y.3Y){$("#3H").1H();$("#3H").3J("1a",o.1I)}$(K).3J("2V",o.3T);o.$I.3J("2V",o.3T)},o));q(o.2P()===x){$(K.1S).V("6m",o.8k)}},7d:u(a){$(".2j").1H();v b=$("#2A a");b.2k("3k");b.eq(a-1).1Z("3k");$("#2j"+a).1k()},7e:u(b,a){o.1y={2s:x,1Y:x,7a:x,6U:x,3e:x,X:x};$.4z(o.1y,a);q($("#"+b).2Y()!==0&&$("#"+b).1j(0).1G==="gB"){o.1y.X=$("#"+b);o.2I=$($("#"+b).1j(0).Z)}B{o.2I=$("#"+b)}o.aI=o.2I.R("3p");q(o.1y.3e){$(o.1y.X).9e($.G(u(){o.2I.7l(u(c){D x});o.6Z()},o))}B{q(o.1y.6U){$("#"+o.1y.6U).1a($.G(o.6Z,o))}}},6Z:u(){o.an(o.2I,o.8Q())},8Q:u(){o.F="f"+2h.7F(2h.7m()*7A);v b=K.5m("E");v a=\'<2f 1B="2D:1N" F="\'+o.F+\'" 1v="\'+o.F+\'"></2f>\';b.5o=a;K.1S.5n(b);q(o.1y.7a){o.1y.7a()}$("#"+o.F).er($.G(o.9u,o));D o.F},an:u(d,c){q(o.1y.X){v e="es"+o.F;v a="eo"+o.F;o.Z=$(\'<Z  3p="\'+o.1y.2s+\'" 3X="6L" 1t="\'+c+\'" 1v="\'+e+\'" F="\'+e+\'" 5v="5t/Z-T"></Z>\');q(o.y.2d!==x&&Q o.y.2d==="1M"){$.1r(o.y.2d,$.G(u(h,f){q(f.4i("#")===0){f=$(f).M()}v i=$(\'<X 1C="7k" 1v="\'+h+\'" 1P="\'+f+\'">\');$(o.Z).1b(i)},o))}v b=o.1y.X;v g=$(b).3K();$(b).R("F",a);$(b).2O(g);$(b).7t(o.Z);$(o.Z).V("2K","6Y");$(o.Z).V("1L","-aC");$(o.Z).V("1z","-aC");$(o.Z).7t("1S");o.Z.7l()}B{d.R("1t",c);d.R("3X","6L");d.R("5v","5t/Z-T");d.R("3p",o.1y.2s);o.2I.7l()}},9u:u(){v c=$("#"+o.F);v e;q(c.a0){e=c.a0}B{q(c.a4){e=c.a4.K}B{e=1o.eQ[o.F].K}}q(o.1y.1Y){q(Q e!=="1g"){v b=e.1S.5o;v a=b.9T(/\\{.*\\}/)[0];o.1y.1Y(a)}B{eX("9R eV!");o.1y.1Y(x)}}o.2I.R("3p",o.aI);o.2I.R("1t","")},5s:u(){q($.1n.2l&&4F($.1n.ao,10)<9){D L}D x},5r:u(a){D $("<p>").1b($(a).eq(0).3K()).N()},eY:u(a){D 4F(a.H("2c",""),10)},2P:u(a){q(a===L&&/(9G|9n|f1|9y|9m)/.6c(5M.5N)){D L}B{q(/(9G|9n|9y|9m)/.6c(5M.5N)){D L}B{D x}}}};$.fn.eK=u(){D o.T("1V").$I};$.fn.4D=u(){D o.T("1V").4D()};$.fn.eJ=u(){D o.T("1V").$I.1p()};$.fn.eI=u(){D o.T("1V").a5()};$.fn.5k=u(a){o.T("1V").5k(a)};$.fn.5Y=u(a){o.T("1V").5Y(a)};$.fn.eM=u(){o.T("1V").9o();o.eO("1V")};$.fn.eN=u(){o.T("1V").1E()};$.fn.1f=u(a,b){o.T("1V").1f(a,b)};(u(b){b.fn.5J=u(c){D o.1r(u(){v d=2H a(o,c);d.5l()})};u a(d,c){o.y=b.4z({2s:x,1Y:x,7I:x,2d:x,1p:C.aE,ac:C.ax},c);o.$el=b(d)}a.6S={5l:u(){q(!b.1n.2l){o.6d=b(\'<E O="fo"></E>\');o.2x=b(\'<E O="fm">\'+o.y.1p+"</E>");o.ar=b(\'<E O="f5">\'+o.y.ac+"</E>");o.6d.1b(o.2x);o.$el.2O(o.6d);o.$el.2O(o.ar);o.2x.2W("f8",b.G(u(){D o.7x()},o));o.2x.2W("eG",b.G(u(){D o.9k()},o));v e=b.G(u(g){v f=4F(g.e9/g.e6*4x,10);o.2x.1p("ed "+f+"%")},o);v d=4g.e5.7D();q(d.3E){d.3E.e4("dY",e,x)}v c=u(){D d};o.2x.1j(0).dZ=b.G(u(h){h.2y();o.2x.2k("5u").1Z("e3");v g=h.e1.e0[0];v f=2H ef();q(o.y.2d!==x&&Q o.y.2d==="1M"){b.1r(o.y.2d,b.G(u(j,i){q(i.4i("#")===0){i=b(i).M()}f.1b(j,i)},o))}f.1b("1U",g);b.ex({ew:"N",2s:o.y.2s,T:f,7D:c,eB:x,eD:x,ev:x,1C:"6L",1Y:b.G(u(i){q(o.y.1Y!==x){o.y.1Y(i)}q(o.y.7I===L){o.2x.N(i)}},o)})},o)}},7x:u(){o.2x.1Z("5u");D x},9k:u(){o.2x.2k("5u");D x}}})(4g);(u(b){v d=/(^|&6w;|\\s)(ek\\..+?\\..+?)(\\s|&gt;|$)/g,a=/(^|&6w;|\\s)(((ej?|ei):\\/\\/|4c:).+?)(\\s|&gt;|$)/g,c=u(){v g=o.6o,f=g.3w;4d(f--){v h=g[f];q(h.5j===3){v e=h.gh;q(e){e=e.H(/&/g,"&gj;").H(/</g,"&6w;").H(/>/g,"&gt;").H(d,\'$1<a Y="gC://$2">$2</a>$3\').H(a,\'$1<a Y="$2">$2</a>$5\');b(h).2r(e).1T()}}B{q(h.5j===1&&!/^(a|3S|2C)$/i.6c(h.1G)){c.9D(h)}}}};b.fn.az=u(){o.1r(c)}})(4g);(u(a){a.1R.2t.3a={aL:u(c,b){a(o).T("3o",x);a(o).T("aH",c);a(o).2W("4n",a.1R.2t.3a.3B)},aO:u(b){a(o).3J("4n",a.1R.2t.3a.3B)},3B:u(b){v c=a(o).T("aH");v d=a.1R.2t.3a.5q(c).3m();q(d!=""){a(o).T("3o",L);b.1C="3a";b.1p=d;a.1R.5W.6T(o,6z)}},5q:u(b){v c="";q(1o.1h){c=1o.1h()}B{q(K.1h){c=K.1h()}B{q(K.2b){c=K.2b.3O().1p}}}D c}};a.1R.2t.3i={aL:u(c,b){a(o).T("7j",c);a(o).T("3o",x);a(o).2W("4n",a.1R.2t.3i.3B);a(o).2W("2V",a.1R.2t.3i.aa)},aO:u(b){a(o).3J("4n",a.1R.2t.3i.3B)},3B:u(b){q(a(o).T("3o")){v c=a(o).T("7j");v d=a.1R.2t.3a.5q(c).3m();q(d==""){a(o).T("3o",x);b.1C="3i";a.1R.5W.6T(o,6z)}}},aa:u(b){q(a(o).T("3o")){v c=a(o).T("7j");v d=a.1R.2t.3a.5q(c).3m();q((b.5p=27)&&(d=="")){a(o).T("3o",x);b.1C="3i";a.1R.5W.6T(o,6z)}}}}})(4g);',62,1034,'||||||||||||||||||||||||this||if||||function|var||false|opts|||else|RLANG|return|div|id|proxy|replace|editor|title|document|true|val|html|class||typeof|attr||data|label|css||input|href|form|||||||table||||click|append|span|syncCode|func|execCommand|undefined|getSelection|null|get|show|exec|td|browser|window|text|find|each|height|target|air|name|void|toolbar|uploadOptions|left|x26|style|type|tr|focus|javascript|tagName|hide|modalClose|pre|video|top|object|none|thead|value|nbsp|event|body|remove|file|redactor|x27|li|success|addClass|||||||||||_0xf6db|selection|px|uploadFields|shortcuts|iframe|offset|Math|width|redactor_tab|removeClass|msie|insert_link_node|className|fixed|formatblock|img|after|url|special|option|redactor_input|link|dropareabox|preventDefault|observeImages|redactor_tabs|backcolor|textarea|display|audio|getParentNode|box|new|element|redactor_file_link|position|image|for|tbody|before|isMobile|replaceWith|parentNode|select|restoreSelection|buttons|keyup|bind|inserthtml|size|blockquote|||||||||||textselect|ul|redactor_modal|bold|auto|italic|outdent|buffer|textunselect|savedSel|redactor_tabs_act|anchorNode|toString|Insert|textselected|action|String|indent|ol|fontcolor|redactor_file|saveSelection|length|formatting|modalInit|redactor_btn_modal_close|redactorfolder|handler|margin|scrollTop|upload|savedSelObj|Selection|redactor_modal_overlay|color|unbind|clone|round|cancel|current_tr|createRange|imageUploadCallback|getBtn|fileUploadCallback|button|hdlModalClose|trim|redactor_tab_selected|src|method|overlay|dropact|||||||||||th|RegExp|mailto|while|shiftKey|mozilla|jQuery|callback|indexOf|dropdowns|visual|unlink|textareamode|mouseup|lang|Delete|Add|redactor_modal_footer|redactor_btns_box|orderedlist|unorderedlist|deleted|insert|100|dropdown|extend|collapse|right|imageUpload|getCode|imageGetJson|parseInt|current_td|parent|current|horizontalrule|code|10px|_imageSet|Header|RELANG|folder|float|observeTables|autoresize|post|redactor_link_url|fileUpload|rel|hideAllDropDown|setFocusNode|insertNodeAtCaret|||||||||||allEmptyHtml|prepend|separator|saveScroll|redactor_link_text|rangeCount|getRangeAt|act|mozillaEmptyHtml|nodeType|setCode|init|createElement|appendChild|innerHTML|keyCode|getSelectedText|outerHTML|oldIE|multipart|hover|enctype|insert_row_below|insert_row_above|cursor|insert_table|insert_column_left|addRange|delete_row|delete_table|delete_column|delete_head|setBtnActive|insert_column_right|add_head|dragupload|pageY|redactor_insert_video_area|navigator|userAgent|stripTags|redactor_file_alt|x3C|x2766|redactor_form_image_align|hasClass|insertColumn|redactor_table_rows|handle|pageX|insertHtml|parents|||||||||||insertRow|deleteHead|test|droparea|h2|h1|Align|caption|h3|h4|keydownCallback|Left|overflow|Right|childNodes|build|observeScroll|redactor_air|execCommandCallback|redactor_editor|convertDivs|source|lt|embed|figure|arguments|Redactor|colors|extractContent|getOrigin|try|redactor_image_box|getFocus|Column|Row|autosave|keydown|POST|Link|keyupCallback|Table|hdlHideDropDown|push|catch|prototype|apply|trigger|redactor_link_mailto|webkit|redactor_link_anchor|absolute|uploadSubmit|||||||||redactor_modal_close||start|Email|alt|setModalTab|uploadInit|redactor_filename|save|choose|redactor_link_blank|rttt|hidden|submit|random|redactor_tab3|redactor_modal_inner|anchor|uploadCrossDomain|URL|redactor_tab2|appendTo|Image|hdlShowDropDown|buildButton|ondrag|filelink|autoSave|99999|interval|Video|xhr|Code|floor|which|buildToolbar|preview|buildColorPicker|setColorNone|showDropDown|b7dde8|List|setBackgroundNone|Color|align_right|align_center|alignright|hideDropDown|redactor_dropdown|align_justify|mobile|ctrlKey|parseJSON|buttonsCustom||||buttonsAdd||||||buildDropdown|redactor_tab1|splice|font|BackColor|forecolor|airButtons|Head|formattingRemove|formatNewLine|DIV|modalSaveBodyOveflow|hr|PRE|inserthorizontalrule|convertLinks|safariShiftKeyEnter|createTextNode|param|tfoot|paragraphy|formatEmpty|BLOCKQUOTE|direction|showAir|enableAir|contenteditable|redactor_editor_wym|x2783|TEXTAREA|fast|getBuffer|wym|setBuffer|zIndex|insertAfter|address|allowedTags|metaKey|image_web_link|modal|fieldset|legend|uploadFrame|getFragmentHtml|formattingIndenting|toggle|formattingAddAfter|formattingAddBefore|formattingEmptyTags|redactor_modal_header|h6|minHeight|||insertunorderedlist||||||||x2778|insertorderedlist|pasteCleanUp|image_position|change|outerHeight|h5|_delete|prebuffer_|x2789|ondragleave|justify|Android|iPod|destroy|redactor_table_columns|tableObserver|table_td|deleteRow|deleteTable|uploadLoaded|showLink|insertTable|redactor_insert_table_btn|BlackBerry|showVideo|search|redactor_insert_link_btn|rows|call|insertVideo|showTable|iPhone|nodeName|deleteColumn|imageSave|insertColumnRight|insertColumnLeft|header1|redactor_image_delete_btn|imageEdit|columns|header2|Upload|imageSetThumb|match|insertRowBelow|insertRowAbove|addHead|header4|table_tr|imageDelete|contentDocument|7f7f7f|redactorSaveBtn|header3|contentWindow|getSelectedHtml|redactor_insert_video_btn|resizeImage|_insertLink|link_new_tab|handlerKey|startContainer|atext|redactor_link_anchor_text|_blank|removeAllRanges|selectNodeContents|redactor_link_mailto_text|getCurrentNode|parentElement|showFile|align_left|aligncenter|uploadForm|version|video_html_code|link_insert|dropalternative|setSelection|alignleft|imageUploadCallbackLink|redactor_upload_btn|showImage|or_choose|insertLink|linkify|redactor_btn_|setBtnInactive|2000px|quote|drop_file_here|paragraph|checked|ttt|element_action|isEmptyObject|removeChild|setup|redactor_link_url_text|Text|teardown|pasteHTML|moveToElementText|dbeef3|e5e0ec|c09100|dbe5f1|c6d9f0|0f243e|ddd9c3|1d1b10|244061|f2dcdb|0c0c0c|Name|ebf1dd|ffe694|974806|938953|548dd4|95b3d7|3f3f3f|bfbfbf|366092|4f6128|17365d|31859b|f2f2f2|a5a5a5|3f3151|fac08f|b2a2c7|262626|d99694|c3d69b|494429|953734|76923c|8db3e2||e36c09|b8cce4|632423|c4bd97|fff2ca|d8d8d8|595959|e5b9b7|d7e3bc|f2c314|7f6000|5f497a|fbd5b5|92cddc|ccc1d9|redactorUploadFileForm|modal_file|fdeada|x27104|getChildIndex|EndToEnd|createTextRange|StartToEnd|nextSibling|compareEndPoints|insertBefore|setEndPoint|getBoundary|focusNode|previousSibling|anchorParent|StartToStart|moveBoundary|supported|focusOffset|0x02|setEnd|setStart|x5Cw|x5Cb|108|eval|moveStart|moveEnd|anchorOffset|empty|break|EndToStart|duplicate|character|compareDocumentPosition|contains|o1|range|o2|node|focn|foco|Dom|cursorNode|split|x2617|win|n1|n2|sel|orgn|orgo|root|getStart|isPreceding|clearSelection|isCursorPreceding|textOffset|getEnd|doc|_ref2|_ref|isText|bStart|textRange|hasSelection|HTML|Unlink|ltr|tab|in|del|strike|cite|mark|Open|Anchor|Center|here|Justify|Horizontal|Deleted|Rule|small|sup|c0504d|4f81bd|9bbb59|8064a2|f79646|4bacc6|1f497d|eeece1||big|sub|figcaption|strong|000000|ffffff|Drop||Or|Ordered|Unordered|Outdent|Indent|Save|Cancel||Back|Font|Paragraph|Formatting|Quote|x27102|Italic|Bold|Above|Below|Embed|web|File|download|Choose|Download|Web|None|Columns|Rows|optional|x27105|Position|Title|ffff00|unselectable|hilitecolor|210|redactor_color_link|backgroundColor|progress|ondrop|files|dataTransfer|redactor_separator_drop|drop|addEventListener|ajaxSettings|total|30px|location|loaded|x2616|transparent|redactor_color_none|Loading|background|FormData|redactor_separator|x269|ftp|https|www||||redactorUploadFile|106||load|redactorUploadForm|107|innerHeight|processData|dataType|ajax|460|7px|redactor_toolbar|cache|setInterval|contentType|1000|showedDropDown|dragleave|first|getSelected|getText|getEditor|cellIndex|destroyEditor|setFocus|removeData|300|frames|600|redactor_image_edit_src|getJSON|570|failed|thumb|alert|normalize|image_edit|380|iPad|mousemove|mousedown|self|redactor_dropalternative|insertNode|x2614|dragover|BODY|cloneNode|createDocumentFragment|firstChild|cloneRange|marker_|htmlText|nw|resize|default|cloneContents|getElementById|slice|redactor_dropareabox||redactor_droparea|redactor_image_box_select|500|undo|redo|removeFormat|checkbox|modal_table|enableObjectResizing|enableInlineTableEditing|scroll|redactorInsertLinkForm|modal_link|subscript|modal_image_edit|101|000|superscript|redactorInsertImageForm|modal_image|filename|setTimeout|paste|redactor_format_h4|redactorInsertVideoForm|strikethrough|redactor_format_h3|redactor_format_h2|160px|redactor_format_pre|redactor_format_h1|bull|separator_drop1|JustifyRight|justifyfull|modal_video|JustifyCenter|JustifyLeft|separator_drop2|separator_drop3|fadeOut|x27100|inArray|toLowerCase|php|z0|103|math|script|marginLeft|marginTop|sid|modal_|times|chrome|nodeValue||amp|internal|marker|redactor_format_blockquote|colgroup|clientX|clientY|x2613|innerWidth|dir||Chrome|redactor_box|delete|300px|fadeIn|x3E0|removeAttr|INPUT|http|on|relative|x2692'.split('|'),0,{}))

/* **********************************************
     Begin jquery.ui.widget.js
********************************************** */

/*
 * jQuery UI Widget 1.8.23+amd
 * https://github.com/blueimp/jQuery-File-Upload
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */

(function (factory) {
    if (typeof define === "function" && define.amd) {
        // Register as an anonymous AMD module:
        define(["jquery"], factory);
    } else {
        // Browser globals:
        factory(jQuery);
    }
}(function( $, undefined ) {

// jQuery 1.4+
    if ( $.cleanData ) {
        var _cleanData = $.cleanData;
        $.cleanData = function( elems ) {
            for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
                try {
                    $( elem ).triggerHandler( "remove" );
                    // http://bugs.jquery.com/ticket/8235
                } catch( e ) {}
            }
            _cleanData( elems );
        };
    } else {
        var _remove = $.fn.remove;
        $.fn.remove = function( selector, keepData ) {
            return this.each(function() {
                if ( !keepData ) {
                    if ( !selector || $.filter( selector, [ this ] ).length ) {
                        $( "*", this ).add( [ this ] ).each(function() {
                            try {
                                $( this ).triggerHandler( "remove" );
                                // http://bugs.jquery.com/ticket/8235
                            } catch( e ) {}
                        });
                    }
                }
                return _remove.call( $(this), selector, keepData );
            });
        };
    }

    $.widget = function( name, base, prototype ) {
        var namespace = name.split( "." )[ 0 ],
            fullName;
        name = name.split( "." )[ 1 ];
        fullName = namespace + "-" + name;

        if ( !prototype ) {
            prototype = base;
            base = $.Widget;
        }

        // create selector for plugin
        $.expr[ ":" ][ fullName ] = function( elem ) {
            return !!$.data( elem, name );
        };

        $[ namespace ] = $[ namespace ] || {};
        $[ namespace ][ name ] = function( options, element ) {
            // allow instantiation without initializing for simple inheritance
            if ( arguments.length ) {
                this._createWidget( options, element );
            }
        };

        var basePrototype = new base();
        // we need to make the options hash a property directly on the new instance
        // otherwise we'll modify the options hash on the prototype that we're
        // inheriting from
//	$.each( basePrototype, function( key, val ) {
//		if ( $.isPlainObject(val) ) {
//			basePrototype[ key ] = $.extend( {}, val );
//		}
//	});
        basePrototype.options = $.extend( true, {}, basePrototype.options );
        $[ namespace ][ name ].prototype = $.extend( true, basePrototype, {
            namespace: namespace,
            widgetName: name,
            widgetEventPrefix: $[ namespace ][ name ].prototype.widgetEventPrefix || name,
            widgetBaseClass: fullName
        }, prototype );

        $.widget.bridge( name, $[ namespace ][ name ] );
    };

    $.widget.bridge = function( name, object ) {
        $.fn[ name ] = function( options ) {
            var isMethodCall = typeof options === "string",
                args = Array.prototype.slice.call( arguments, 1 ),
                returnValue = this;

            // allow multiple hashes to be passed on init
            options = !isMethodCall && args.length ?
                $.extend.apply( null, [ true, options ].concat(args) ) :
                options;

            // prevent calls to internal methods
            if ( isMethodCall && options.charAt( 0 ) === "_" ) {
                return returnValue;
            }

            if ( isMethodCall ) {
                this.each(function() {
                    var instance = $.data( this, name ),
                        methodValue = instance && $.isFunction( instance[options] ) ?
                            instance[ options ].apply( instance, args ) :
                            instance;
                    // TODO: add this back in 1.9 and use $.error() (see #5972)
//				if ( !instance ) {
//					throw "cannot call methods on " + name + " prior to initialization; " +
//						"attempted to call method '" + options + "'";
//				}
//				if ( !$.isFunction( instance[options] ) ) {
//					throw "no such method '" + options + "' for " + name + " widget instance";
//				}
//				var methodValue = instance[ options ].apply( instance, args );
                    if ( methodValue !== instance && methodValue !== undefined ) {
                        returnValue = methodValue;
                        return false;
                    }
                });
            } else {
                this.each(function() {
                    var instance = $.data( this, name );
                    if ( instance ) {
                        instance.option( options || {} )._init();
                    } else {
                        $.data( this, name, new object( options, this ) );
                    }
                });
            }

            return returnValue;
        };
    };

    $.Widget = function( options, element ) {
        // allow instantiation without initializing for simple inheritance
        if ( arguments.length ) {
            this._createWidget( options, element );
        }
    };

    $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        options: {
            disabled: false
        },
        _createWidget: function( options, element ) {
            // $.widget.bridge stores the plugin instance, but we do it anyway
            // so that it's stored even before the _create function runs
            $.data( element, this.widgetName, this );
            this.element = $( element );
            this.options = $.extend( true, {},
                this.options,
                this._getCreateOptions(),
                options );

            var self = this;
            this.element.bind( "remove." + this.widgetName, function() {
                self.destroy();
            });

            this._create();
            this._trigger( "create" );
            this._init();
        },
        _getCreateOptions: function() {
            return $.metadata && $.metadata.get( this.element[0] )[ this.widgetName ];
        },
        _create: function() {},
        _init: function() {},

        destroy: function() {
            this.element
                .unbind( "." + this.widgetName )
                .removeData( this.widgetName );
            this.widget()
                .unbind( "." + this.widgetName )
                .removeAttr( "aria-disabled" )
                .removeClass(
                this.widgetBaseClass + "-disabled " +
                    "ui-state-disabled" );
        },

        widget: function() {
            return this.element;
        },

        option: function( key, value ) {
            var options = key;

            if ( arguments.length === 0 ) {
                // don't return a reference to the internal hash
                return $.extend( {}, this.options );
            }

            if  (typeof key === "string" ) {
                if ( value === undefined ) {
                    return this.options[ key ];
                }
                options = {};
                options[ key ] = value;
            }

            this._setOptions( options );

            return this;
        },
        _setOptions: function( options ) {
            var self = this;
            $.each( options, function( key, value ) {
                self._setOption( key, value );
            });

            return this;
        },
        _setOption: function( key, value ) {
            this.options[ key ] = value;

            if ( key === "disabled" ) {
                this.widget()
                    [ value ? "addClass" : "removeClass"](
                    this.widgetBaseClass + "-disabled" + " " +
                        "ui-state-disabled" )
                    .attr( "aria-disabled", value );
            }

            return this;
        },

        enable: function() {
            return this._setOption( "disabled", false );
        },
        disable: function() {
            return this._setOption( "disabled", true );
        },

        _trigger: function( type, event, data ) {
            var prop, orig,
                callback = this.options[ type ];

            data = data || {};
            event = $.Event( event );
            event.type = ( type === this.widgetEventPrefix ?
                type :
                this.widgetEventPrefix + type ).toLowerCase();
            // the original event may come from any element
            // so we need to reset the target on the new event
            event.target = this.element[ 0 ];

            // copy original event properties over to the new event
            orig = event.originalEvent;
            if ( orig ) {
                for ( prop in orig ) {
                    if ( !( prop in event ) ) {
                        event[ prop ] = orig[ prop ];
                    }
                }
            }

            this.element.trigger( event, data );

            return !( $.isFunction(callback) &&
                callback.call( this.element[0], event, data ) === false ||
                event.isDefaultPrevented() );
        }
    };

}));


/* **********************************************
     Begin jquery.iframe-transport.js
********************************************** */

/*
 * jQuery Iframe Transport Plugin 1.5
 * https://github.com/blueimp/jQuery-File-Upload
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */

/*jslint unparam: true, nomen: true */
/*global define, window, document */

(function (factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        // Register as an anonymous AMD module:
        define(['jquery'], factory);
    } else {
        // Browser globals:
        factory(window.jQuery);
    }
}(function ($) {
    'use strict';

    // Helper variable to create unique names for the transport iframes:
    var counter = 0;

    // The iframe transport accepts three additional options:
    // options.fileInput: a jQuery collection of file input fields
    // options.paramName: the parameter name for the file form data,
    //  overrides the name property of the file input field(s),
    //  can be a string or an array of strings.
    // options.formData: an array of objects with name and value properties,
    //  equivalent to the return data of .serializeArray(), e.g.:
    //  [{name: 'a', value: 1}, {name: 'b', value: 2}]
    $.ajaxTransport('iframe', function (options) {
        if (options.async && (options.type === 'POST' || options.type === 'GET')) {
            var form,
                iframe;
            return {
                send: function (_, completeCallback) {
                    form = $('<form style="display:none;"></form>');
                    form.attr('accept-charset', options.formAcceptCharset);
                    // javascript:false as initial iframe src
                    // prevents warning popups on HTTPS in IE6.
                    // IE versions below IE8 cannot set the name property of
                    // elements that have already been added to the DOM,
                    // so we set the name along with the iframe HTML markup:
                    iframe = $(
                        '<iframe src="javascript:false;" name="iframe-transport-' +
                            (counter += 1) + '"></iframe>'
                    ).bind('load', function () {
                        var fileInputClones,
                            paramNames = $.isArray(options.paramName) ?
                                    options.paramName : [options.paramName];
                        iframe
                            .unbind('load')
                            .bind('load', function () {
                                var response;
                                // Wrap in a try/catch block to catch exceptions thrown
                                // when trying to access cross-domain iframe contents:
                                try {
                                    response = iframe.contents();
                                    // Google Chrome and Firefox do not throw an
                                    // exception when calling iframe.contents() on
                                    // cross-domain requests, so we unify the response:
                                    if (!response.length || !response[0].firstChild) {
                                        throw new Error();
                                    }
                                } catch (e) {
                                    response = undefined;
                                }
                                // The complete callback returns the
                                // iframe content document as response object:
                                completeCallback(
                                    200,
                                    'success',
                                    {'iframe': response}
                                );
                                // Fix for IE endless progress bar activity bug
                                // (happens on form submits to iframe targets):
                                $('<iframe src="javascript:false;"></iframe>')
                                    .appendTo(form);
                                form.remove();
                            });
                        form
                            .prop('target', iframe.prop('name'))
                            .prop('action', options.url)
                            .prop('method', options.type);
                        if (options.formData) {
                            $.each(options.formData, function (index, field) {
                                $('<input type="hidden"/>')
                                    .prop('name', field.name)
                                    .val(field.value)
                                    .appendTo(form);
                            });
                        }
                        if (options.fileInput && options.fileInput.length &&
                                options.type === 'POST') {
                            fileInputClones = options.fileInput.clone();
                            // Insert a clone for each file input field:
                            options.fileInput.after(function (index) {
                                return fileInputClones[index];
                            });
                            if (options.paramName) {
                                options.fileInput.each(function (index) {
                                    $(this).prop(
                                        'name',
                                        paramNames[index] || options.paramName
                                    );
                                });
                            }
                            // Appending the file input fields to the hidden form
                            // removes them from their original location:
                            form
                                .append(options.fileInput)
                                .prop('enctype', 'multipart/form-data')
                                // enctype must be set as encoding for IE:
                                .prop('encoding', 'multipart/form-data');
                        }
                        form.submit();
                        // Insert the file input fields at their original location
                        // by replacing the clones with the originals:
                        if (fileInputClones && fileInputClones.length) {
                            options.fileInput.each(function (index, input) {
                                var clone = $(fileInputClones[index]);
                                $(input).prop('name', clone.prop('name'));
                                clone.replaceWith(input);
                            });
                        }
                    });
                    form.append(iframe).appendTo(document.body);
                },
                abort: function () {
                    if (iframe) {
                        // javascript:false as iframe src aborts the request
                        // and prevents warning popups on HTTPS in IE6.
                        // concat is used to avoid the "Script URL" JSLint error:
                        iframe
                            .unbind('load')
                            .prop('src', 'javascript'.concat(':false;'));
                    }
                    if (form) {
                        form.remove();
                    }
                }
            };
        }
    });

    // The iframe transport returns the iframe content document as response.
    // The following adds converters from iframe to text, json, html, and script:
    $.ajaxSetup({
        converters: {
            'iframe text': function (iframe) {
                return $(iframe[0].body).text();
            },
            'iframe json': function (iframe) {
                return $.parseJSON($(iframe[0].body).text());
            },
            'iframe html': function (iframe) {
                return $(iframe[0].body).html();
            },
            'iframe script': function (iframe) {
                return $.globalEval($(iframe[0].body).text());
            }
        }
    });

}));


/* **********************************************
     Begin jquery.fileupload.js
********************************************** */

/*
 * jQuery File Upload Plugin 5.17.3
 * https://github.com/blueimp/jQuery-File-Upload
 *
 * Copyright 2010, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */

/*jslint nomen: true, unparam: true, regexp: true */
/*global define, window, document, Blob, FormData, location */

(function (factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        // Register as an anonymous AMD module:
        define([
            'jquery',
            'jquery.ui.widget'
        ], factory);
    } else {
        // Browser globals:
        factory(window.jQuery);
    }
}(function ($) {
    'use strict';

    // The FileReader API is not actually used, but works as feature detection,
    // as e.g. Safari supports XHR file uploads via the FormData API,
    // but not non-multipart XHR file uploads:
    $.support.xhrFileUpload = !!(window.XMLHttpRequestUpload && window.FileReader);
    $.support.xhrFormDataFileUpload = !!window.FormData;

    // The fileupload widget listens for change events on file input fields defined
    // via fileInput setting and paste or drop events of the given dropZone.
    // In addition to the default jQuery Widget methods, the fileupload widget
    // exposes the "add" and "send" methods, to add or directly send files using
    // the fileupload API.
    // By default, files added via file input selection, paste, drag & drop or
    // "add" method are uploaded immediately, but it is possible to override
    // the "add" callback option to queue file uploads.
    $.widget('blueimp.fileupload', {

        options: {
            // The namespace used for event handler binding on the fileInput,
            // dropZone and pasteZone document nodes.
            // If not set, the name of the widget ("fileupload") is used.
            namespace: undefined,
            // The drop target element(s), by the default the complete document.
            // Set to null to disable drag & drop support:
            dropZone: $(document),
            // The paste target element(s), by the default the complete document.
            // Set to null to disable paste support:
            pasteZone: $(document),
            // The file input field(s), that are listened to for change events.
            // If undefined, it is set to the file input fields inside
            // of the widget element on plugin initialization.
            // Set to null to disable the change listener.
            fileInput: undefined,
            // By default, the file input field is replaced with a clone after
            // each input field change event. This is required for iframe transport
            // queues and allows change events to be fired for the same file
            // selection, but can be disabled by setting the following option to false:
            replaceFileInput: true,
            // The parameter name for the file form data (the request argument name).
            // If undefined or empty, the name property of the file input field is
            // used, or "files[]" if the file input name property is also empty,
            // can be a string or an array of strings:
            paramName: undefined,
            // By default, each file of a selection is uploaded using an individual
            // request for XHR type uploads. Set to false to upload file
            // selections in one request each:
            singleFileUploads: true,
            // To limit the number of files uploaded with one XHR request,
            // set the following option to an integer greater than 0:
            limitMultiFileUploads: undefined,
            // Set the following option to true to issue all file upload requests
            // in a sequential order:
            sequentialUploads: false,
            // To limit the number of concurrent uploads,
            // set the following option to an integer greater than 0:
            limitConcurrentUploads: undefined,
            // Set the following option to true to force iframe transport uploads:
            forceIframeTransport: false,
            // Set the following option to the location of a redirect url on the
            // origin server, for cross-domain iframe transport uploads:
            redirect: undefined,
            // The parameter name for the redirect url, sent as part of the form
            // data and set to 'redirect' if this option is empty:
            redirectParamName: undefined,
            // Set the following option to the location of a postMessage window,
            // to enable postMessage transport uploads:
            postMessage: undefined,
            // By default, XHR file uploads are sent as multipart/form-data.
            // The iframe transport is always using multipart/form-data.
            // Set to false to enable non-multipart XHR uploads:
            multipart: true,
            // To upload large files in smaller chunks, set the following option
            // to a preferred maximum chunk size. If set to 0, null or undefined,
            // or the browser does not support the required Blob API, files will
            // be uploaded as a whole.
            maxChunkSize: undefined,
            // When a non-multipart upload or a chunked multipart upload has been
            // aborted, this option can be used to resume the upload by setting
            // it to the size of the already uploaded bytes. This option is most
            // useful when modifying the options object inside of the "add" or
            // "send" callbacks, as the options are cloned for each file upload.
            uploadedBytes: undefined,
            // By default, failed (abort or error) file uploads are removed from the
            // global progress calculation. Set the following option to false to
            // prevent recalculating the global progress data:
            recalculateProgress: true,
            // Interval in milliseconds to calculate and trigger progress events:
            progressInterval: 100,
            // Interval in milliseconds to calculate progress bitrate:
            bitrateInterval: 500,

            // Additional form data to be sent along with the file uploads can be set
            // using this option, which accepts an array of objects with name and
            // value properties, a function returning such an array, a FormData
            // object (for XHR file uploads), or a simple object.
            // The form of the first fileInput is given as parameter to the function:
            formData: function (form) {
                return form.serializeArray();
            },

            // The add callback is invoked as soon as files are added to the fileupload
            // widget (via file input selection, drag & drop, paste or add API call).
            // If the singleFileUploads option is enabled, this callback will be
            // called once for each file in the selection for XHR file uplaods, else
            // once for each file selection.
            // The upload starts when the submit method is invoked on the data parameter.
            // The data object contains a files property holding the added files
            // and allows to override plugin options as well as define ajax settings.
            // Listeners for this callback can also be bound the following way:
            // .bind('fileuploadadd', func);
            // data.submit() returns a Promise object and allows to attach additional
            // handlers using jQuery's Deferred callbacks:
            // data.submit().done(func).fail(func).always(func);
            add: function (e, data) {
                data.submit();
            },

            // Other callbacks:
            // Callback for the submit event of each file upload:
            // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);
            // Callback for the start of each file upload request:
            // send: function (e, data) {}, // .bind('fileuploadsend', func);
            // Callback for successful uploads:
            // done: function (e, data) {}, // .bind('fileuploaddone', func);
            // Callback for failed (abort or error) uploads:
            // fail: function (e, data) {}, // .bind('fileuploadfail', func);
            // Callback for completed (success, abort or error) requests:
            // always: function (e, data) {}, // .bind('fileuploadalways', func);
            // Callback for upload progress events:
            // progress: function (e, data) {}, // .bind('fileuploadprogress', func);
            // Callback for global upload progress events:
            // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);
            // Callback for uploads start, equivalent to the global ajaxStart event:
            // start: function (e) {}, // .bind('fileuploadstart', func);
            // Callback for uploads stop, equivalent to the global ajaxStop event:
            // stop: function (e) {}, // .bind('fileuploadstop', func);
            // Callback for change events of the fileInput(s):
            // change: function (e, data) {}, // .bind('fileuploadchange', func);
            // Callback for paste events to the pasteZone(s):
            // paste: function (e, data) {}, // .bind('fileuploadpaste', func);
            // Callback for drop events of the dropZone(s):
            // drop: function (e, data) {}, // .bind('fileuploaddrop', func);
            // Callback for dragover events of the dropZone(s):
            // dragover: function (e) {}, // .bind('fileuploaddragover', func);

            // The plugin options are used as settings object for the ajax calls.
            // The following are jQuery ajax settings required for the file uploads:
            processData: false,
            contentType: false,
            cache: false
        },

        // A list of options that require a refresh after assigning a new value:
        _refreshOptionsList: [
            'namespace',
            'fileInput',
            'dropZone',
            'pasteZone',
            'multipart',
            'forceIframeTransport'
        ],

        _BitrateTimer: function () {
            this.timestamp = +(new Date());
            this.loaded = 0;
            this.bitrate = 0;
            this.getBitrate = function (now, loaded, interval) {
                var timeDiff = now - this.timestamp;
                if (!this.bitrate || !interval || timeDiff > interval) {
                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;
                    this.loaded = loaded;
                    this.timestamp = now;
                }
                return this.bitrate;
            };
        },

        _isXHRUpload: function (options) {
            return !options.forceIframeTransport &&
                ((!options.multipart && $.support.xhrFileUpload) ||
                    $.support.xhrFormDataFileUpload);
        },

        _getFormData: function (options) {
            var formData;
            if (typeof options.formData === 'function') {
                return options.formData(options.form);
            }
            if ($.isArray(options.formData)) {
                return options.formData;
            }
            if (options.formData) {
                formData = [];
                $.each(options.formData, function (name, value) {
                    formData.push({name: name, value: value});
                });
                return formData;
            }
            return [];
        },

        _getTotal: function (files) {
            var total = 0;
            $.each(files, function (index, file) {
                total += file.size || 1;
            });
            return total;
        },

        _onProgress: function (e, data) {
            if (e.lengthComputable) {
                var now = +(new Date()),
                    total,
                    loaded;
                if (data._time && data.progressInterval &&
                    (now - data._time < data.progressInterval) &&
                    e.loaded !== e.total) {
                    return;
                }
                data._time = now;
                total = data.total || this._getTotal(data.files);
                loaded = parseInt(
                    e.loaded / e.total * (data.chunkSize || total),
                    10
                ) + (data.uploadedBytes || 0);
                this._loaded += loaded - (data.loaded || data.uploadedBytes || 0);
                data.lengthComputable = true;
                data.loaded = loaded;
                data.total = total;
                data.bitrate = data._bitrateTimer.getBitrate(
                    now,
                    loaded,
                    data.bitrateInterval
                );
                // Trigger a custom progress event with a total data property set
                // to the file size(s) of the current upload and a loaded data
                // property calculated accordingly:
                this._trigger('progress', e, data);
                // Trigger a global progress event for all current file uploads,
                // including ajax calls queued for sequential file uploads:
                this._trigger('progressall', e, {
                    lengthComputable: true,
                    loaded: this._loaded,
                    total: this._total,
                    bitrate: this._bitrateTimer.getBitrate(
                        now,
                        this._loaded,
                        data.bitrateInterval
                    )
                });
            }
        },

        _initProgressListener: function (options) {
            var that = this,
                xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();
            // Accesss to the native XHR object is required to add event listeners
            // for the upload progress event:
            if (xhr.upload) {
                $(xhr.upload).bind('progress', function (e) {
                    var oe = e.originalEvent;
                    // Make sure the progress event properties get copied over:
                    e.lengthComputable = oe.lengthComputable;
                    e.loaded = oe.loaded;
                    e.total = oe.total;
                    that._onProgress(e, options);
                });
                options.xhr = function () {
                    return xhr;
                };
            }
        },

        _initXHRData: function (options) {
            var formData,
                file = options.files[0],
            // Ignore non-multipart setting if not supported:
                multipart = options.multipart || !$.support.xhrFileUpload,
                paramName = options.paramName[0];
            if (!multipart || options.blob) {
                // For non-multipart uploads and chunked uploads,
                // file meta data is not part of the request body,
                // so we transmit this data as part of the HTTP headers.
                // For cross domain requests, these headers must be allowed
                // via Access-Control-Allow-Headers or removed using
                // the beforeSend callback:
                options.headers = $.extend(options.headers, {
                    'X-File-Name': file.name,
                    'X-File-Type': file.type,
                    'X-File-Size': file.size
                });
                if (!options.blob) {
                    // Non-chunked non-multipart upload:
                    options.contentType = file.type;
                    options.data = file;
                } else if (!multipart) {
                    // Chunked non-multipart upload:
                    options.contentType = 'application/octet-stream';
                    options.data = options.blob;
                }
            }
            if (multipart && $.support.xhrFormDataFileUpload) {
                if (options.postMessage) {
                    // window.postMessage does not allow sending FormData
                    // objects, so we just add the File/Blob objects to
                    // the formData array and let the postMessage window
                    // create the FormData object out of this array:
                    formData = this._getFormData(options);
                    if (options.blob) {
                        formData.push({
                            name: paramName,
                            value: options.blob
                        });
                    } else {
                        $.each(options.files, function (index, file) {
                            formData.push({
                                name: options.paramName[index] || paramName,
                                value: file
                            });
                        });
                    }
                } else {
                    if (options.formData instanceof FormData) {
                        formData = options.formData;
                    } else {
                        formData = new FormData();
                        $.each(this._getFormData(options), function (index, field) {
                            formData.append(field.name, field.value);
                        });
                    }
                    if (options.blob) {
                        formData.append(paramName, options.blob, file.name);
                    } else {
                        $.each(options.files, function (index, file) {
                            // File objects are also Blob instances.
                            // This check allows the tests to run with
                            // dummy objects:
                            if (file instanceof Blob) {
                                formData.append(
                                    options.paramName[index] || paramName,
                                    file,
                                    file.name
                                );
                            }
                        });
                    }
                }
                options.data = formData;
            }
            // Blob reference is not needed anymore, free memory:
            options.blob = null;
        },

        _initIframeSettings: function (options) {
            // Setting the dataType to iframe enables the iframe transport:
            options.dataType = 'iframe ' + (options.dataType || '');
            // The iframe transport accepts a serialized array as form data:
            options.formData = this._getFormData(options);
            // Add redirect url to form data on cross-domain uploads:
            if (options.redirect && $('<a></a>').prop('href', options.url)
                .prop('host') !== location.host) {
                options.formData.push({
                    name: options.redirectParamName || 'redirect',
                    value: options.redirect
                });
            }
        },

        _initDataSettings: function (options) {
            if (this._isXHRUpload(options)) {
                if (!this._chunkedUpload(options, true)) {
                    if (!options.data) {
                        this._initXHRData(options);
                    }
                    this._initProgressListener(options);
                }
                if (options.postMessage) {
                    // Setting the dataType to postmessage enables the
                    // postMessage transport:
                    options.dataType = 'postmessage ' + (options.dataType || '');
                }
            } else {
                this._initIframeSettings(options, 'iframe');
            }
        },

        _getParamName: function (options) {
            var fileInput = $(options.fileInput),
                paramName = options.paramName;
            if (!paramName) {
                paramName = [];
                fileInput.each(function () {
                    var input = $(this),
                        name = input.prop('name') || 'files[]',
                        i = (input.prop('files') || [1]).length;
                    while (i) {
                        paramName.push(name);
                        i -= 1;
                    }
                });
                if (!paramName.length) {
                    paramName = [fileInput.prop('name') || 'files[]'];
                }
            } else if (!$.isArray(paramName)) {
                paramName = [paramName];
            }
            return paramName;
        },

        _initFormSettings: function (options) {
            // Retrieve missing options from the input field and the
            // associated form, if available:
            if (!options.form || !options.form.length) {
                options.form = $(options.fileInput.prop('form'));
                // If the given file input doesn't have an associated form,
                // use the default widget file input's form:
                if (!options.form.length) {
                    options.form = $(this.options.fileInput.prop('form'));
                }
            }
            options.paramName = this._getParamName(options);
            if (!options.url) {
                options.url = options.form.prop('action') || location.href;
            }
            // The HTTP request method must be "POST" or "PUT":
            options.type = (options.type || options.form.prop('method') || '')
                .toUpperCase();
            if (options.type !== 'POST' && options.type !== 'PUT') {
                options.type = 'POST';
            }
            if (!options.formAcceptCharset) {
                options.formAcceptCharset = options.form.attr('accept-charset');
            }
        },

        _getAJAXSettings: function (data) {
            var options = $.extend({}, this.options, data);
            this._initFormSettings(options);
            this._initDataSettings(options);
            return options;
        },

        // Maps jqXHR callbacks to the equivalent
        // methods of the given Promise object:
        _enhancePromise: function (promise) {
            promise.success = promise.done;
            promise.error = promise.fail;
            promise.complete = promise.always;
            return promise;
        },

        // Creates and returns a Promise object enhanced with
        // the jqXHR methods abort, success, error and complete:
        _getXHRPromise: function (resolveOrReject, context, args) {
            var dfd = $.Deferred(),
                promise = dfd.promise();
            context = context || this.options.context || promise;
            if (resolveOrReject === true) {
                dfd.resolveWith(context, args);
            } else if (resolveOrReject === false) {
                dfd.rejectWith(context, args);
            }
            promise.abort = dfd.promise;
            return this._enhancePromise(promise);
        },

        // Uploads a file in multiple, sequential requests
        // by splitting the file up in multiple blob chunks.
        // If the second parameter is true, only tests if the file
        // should be uploaded in chunks, but does not invoke any
        // upload requests:
        _chunkedUpload: function (options, testOnly) {
            var that = this,
                file = options.files[0],
                fs = file.size,
                ub = options.uploadedBytes = options.uploadedBytes || 0,
                mcs = options.maxChunkSize || fs,
                slice = file.slice || file.webkitSlice || file.mozSlice,
                upload,
                n,
                jqXHR,
                pipe;
            if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) ||
                options.data) {
                return false;
            }
            if (testOnly) {
                return true;
            }
            if (ub >= fs) {
                file.error = 'uploadedBytes';
                return this._getXHRPromise(
                    false,
                    options.context,
                    [null, 'error', file.error]
                );
            }
            // n is the number of blobs to upload,
            // calculated via filesize, uploaded bytes and max chunk size:
            n = Math.ceil((fs - ub) / mcs);
            // The chunk upload method accepting the chunk number as parameter:
            upload = function (i) {
                if (!i) {
                    return that._getXHRPromise(true, options.context);
                }
                // Upload the blobs in sequential order:
                return upload(i -= 1).pipe(function () {
                    // Clone the options object for each chunk upload:
                    var o = $.extend({}, options);
                    o.blob = slice.call(
                        file,
                        ub + i * mcs,
                        ub + (i + 1) * mcs
                    );
                    // Expose the chunk index:
                    o.chunkIndex = i;
                    // Expose the number of chunks:
                    o.chunksNumber = n;
                    // Store the current chunk size, as the blob itself
                    // will be dereferenced after data processing:
                    o.chunkSize = o.blob.size;
                    // Process the upload data (the blob and potential form data):
                    that._initXHRData(o);
                    // Add progress listeners for this chunk upload:
                    that._initProgressListener(o);
                    jqXHR = ($.ajax(o) || that._getXHRPromise(false, o.context))
                        .done(function () {
                            // Create a progress event if upload is done and
                            // no progress event has been invoked for this chunk:
                            if (!o.loaded) {
                                that._onProgress($.Event('progress', {
                                    lengthComputable: true,
                                    loaded: o.chunkSize,
                                    total: o.chunkSize
                                }), o);
                            }
                            options.uploadedBytes = o.uploadedBytes +=
                                o.chunkSize;
                        });
                    return jqXHR;
                });
            };
            // Return the piped Promise object, enhanced with an abort method,
            // which is delegated to the jqXHR object of the current upload,
            // and jqXHR callbacks mapped to the equivalent Promise methods:
            pipe = upload(n);
            pipe.abort = function () {
                return jqXHR.abort();
            };
            return this._enhancePromise(pipe);
        },

        _beforeSend: function (e, data) {
            if (this._active === 0) {
                // the start callback is triggered when an upload starts
                // and no other uploads are currently running,
                // equivalent to the global ajaxStart event:
                this._trigger('start');
                // Set timer for global bitrate progress calculation:
                this._bitrateTimer = new this._BitrateTimer();
            }
            this._active += 1;
            // Initialize the global progress values:
            this._loaded += data.uploadedBytes || 0;
            this._total += this._getTotal(data.files);
        },

        _onDone: function (result, textStatus, jqXHR, options) {
            if (!this._isXHRUpload(options)) {
                // Create a progress event for each iframe load:
                this._onProgress($.Event('progress', {
                    lengthComputable: true,
                    loaded: 1,
                    total: 1
                }), options);
            }
            options.result = result;
            options.textStatus = textStatus;
            options.jqXHR = jqXHR;
            this._trigger('done', null, options);
        },

        _onFail: function (jqXHR, textStatus, errorThrown, options) {
            options.jqXHR = jqXHR;
            options.textStatus = textStatus;
            options.errorThrown = errorThrown;
            this._trigger('fail', null, options);
            if (options.recalculateProgress) {
                // Remove the failed (error or abort) file upload from
                // the global progress calculation:
                this._loaded -= options.loaded || options.uploadedBytes || 0;
                this._total -= options.total || this._getTotal(options.files);
            }
        },

        _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {
            this._active -= 1;
            options.textStatus = textStatus;
            if (jqXHRorError && jqXHRorError.always) {
                options.jqXHR = jqXHRorError;
                options.result = jqXHRorResult;
            } else {
                options.jqXHR = jqXHRorResult;
                options.errorThrown = jqXHRorError;
            }
            this._trigger('always', null, options);
            if (this._active === 0) {
                // The stop callback is triggered when all uploads have
                // been completed, equivalent to the global ajaxStop event:
                this._trigger('stop');
                // Reset the global progress values:
                this._loaded = this._total = 0;
                this._bitrateTimer = null;
            }
        },

        _onSend: function (e, data) {
            var that = this,
                jqXHR,
                slot,
                pipe,
                options = that._getAJAXSettings(data),
                send = function (resolve, args) {
                    that._sending += 1;
                    // Set timer for bitrate progress calculation:
                    options._bitrateTimer = new that._BitrateTimer();
                    jqXHR = jqXHR || (
                        (resolve !== false &&
                            that._trigger('send', e, options) !== false &&
                            (that._chunkedUpload(options) || $.ajax(options))) ||
                            that._getXHRPromise(false, options.context, args)
                        ).done(function (result, textStatus, jqXHR) {
                            that._onDone(result, textStatus, jqXHR, options);
                        }).fail(function (jqXHR, textStatus, errorThrown) {
                            that._onFail(jqXHR, textStatus, errorThrown, options);
                        }).always(function (jqXHRorResult, textStatus, jqXHRorError) {
                            that._sending -= 1;
                            that._onAlways(
                                jqXHRorResult,
                                textStatus,
                                jqXHRorError,
                                options
                            );
                            if (options.limitConcurrentUploads &&
                                options.limitConcurrentUploads > that._sending) {
                                // Start the next queued upload,
                                // that has not been aborted:
                                var nextSlot = that._slots.shift(),
                                    isPending;
                                while (nextSlot) {
                                    // jQuery 1.6 doesn't provide .state(),
                                    // while jQuery 1.8+ removed .isRejected():
                                    isPending = nextSlot.state ?
                                        nextSlot.state() === 'pending' :
                                        !nextSlot.isRejected();
                                    if (isPending) {
                                        nextSlot.resolve();
                                        break;
                                    }
                                    nextSlot = that._slots.shift();
                                }
                            }
                        });
                    return jqXHR;
                };
            this._beforeSend(e, options);
            if (this.options.sequentialUploads ||
                (this.options.limitConcurrentUploads &&
                    this.options.limitConcurrentUploads <= this._sending)) {
                if (this.options.limitConcurrentUploads > 1) {
                    slot = $.Deferred();
                    this._slots.push(slot);
                    pipe = slot.pipe(send);
                } else {
                    pipe = (this._sequence = this._sequence.pipe(send, send));
                }
                // Return the piped Promise object, enhanced with an abort method,
                // which is delegated to the jqXHR object of the current upload,
                // and jqXHR callbacks mapped to the equivalent Promise methods:
                pipe.abort = function () {
                    var args = [undefined, 'abort', 'abort'];
                    if (!jqXHR) {
                        if (slot) {
                            slot.rejectWith(pipe, args);
                        }
                        return send(false, args);
                    }
                    return jqXHR.abort();
                };
                return this._enhancePromise(pipe);
            }
            return send();
        },

        _onAdd: function (e, data) {
            var that = this,
                result = true,
                options = $.extend({}, this.options, data),
                limit = options.limitMultiFileUploads,
                paramName = this._getParamName(options),
                paramNameSet,
                paramNameSlice,
                fileSet,
                i;
            if (!(options.singleFileUploads || limit) ||
                !this._isXHRUpload(options)) {
                fileSet = [data.files];
                paramNameSet = [paramName];
            } else if (!options.singleFileUploads && limit) {
                fileSet = [];
                paramNameSet = [];
                for (i = 0; i < data.files.length; i += limit) {
                    fileSet.push(data.files.slice(i, i + limit));
                    paramNameSlice = paramName.slice(i, i + limit);
                    if (!paramNameSlice.length) {
                        paramNameSlice = paramName;
                    }
                    paramNameSet.push(paramNameSlice);
                }
            } else {
                paramNameSet = paramName;
            }
            data.originalFiles = data.files;
            $.each(fileSet || data.files, function (index, element) {
                var newData = $.extend({}, data);
                newData.files = fileSet ? element : [element];
                newData.paramName = paramNameSet[index];
                newData.submit = function () {
                    newData.jqXHR = this.jqXHR =
                        (that._trigger('submit', e, this) !== false) &&
                            that._onSend(e, this);
                    return this.jqXHR;
                };
                return (result = that._trigger('add', e, newData));
            });
            return result;
        },

        _replaceFileInput: function (input) {
            var inputClone = input.clone(true);
            $('<form></form>').append(inputClone)[0].reset();
            // Detaching allows to insert the fileInput on another form
            // without loosing the file input value:
            input.after(inputClone).detach();
            // Avoid memory leaks with the detached file input:
            $.cleanData(input.unbind('remove'));
            // Replace the original file input element in the fileInput
            // elements set with the clone, which has been copied including
            // event handlers:
            this.options.fileInput = this.options.fileInput.map(function (i, el) {
                if (el === input[0]) {
                    return inputClone[0];
                }
                return el;
            });
            // If the widget has been initialized on the file input itself,
            // override this.element with the file input clone:
            if (input[0] === this.element[0]) {
                this.element = inputClone;
            }
        },

        _handleFileTreeEntry: function (entry, path) {
            var that = this,
                dfd = $.Deferred(),
                errorHandler = function (e) {
                    if (e && !e.entry) {
                        e.entry = entry;
                    }
                    // Since $.when returns immediately if one
                    // Deferred is rejected, we use resolve instead.
                    // This allows valid files and invalid items
                    // to be returned together in one set:
                    dfd.resolve([e]);
                },
                dirReader;
            path = path || '';
            if (entry.isFile) {
                entry.file(function (file) {
                    file.relativePath = path;
                    dfd.resolve(file);
                }, errorHandler);
            } else if (entry.isDirectory) {
                dirReader = entry.createReader();
                dirReader.readEntries(function (entries) {
                    that._handleFileTreeEntries(
                        entries,
                        path + entry.name + '/'
                    ).done(function (files) {
                            dfd.resolve(files);
                        }).fail(errorHandler);
                }, errorHandler);
            } else {
                // Return an empy list for file system items
                // other than files or directories:
                dfd.resolve([]);
            }
            return dfd.promise();
        },

        _handleFileTreeEntries: function (entries, path) {
            var that = this;
            return $.when.apply(
                $,
                $.map(entries, function (entry) {
                    return that._handleFileTreeEntry(entry, path);
                })
            ).pipe(function () {
                    return Array.prototype.concat.apply(
                        [],
                        arguments
                    );
                });
        },

        _getDroppedFiles: function (dataTransfer) {
            dataTransfer = dataTransfer || {};
            var items = dataTransfer.items;
            if (items && items.length && (items[0].webkitGetAsEntry ||
                items[0].getAsEntry)) {
                return this._handleFileTreeEntries(
                    $.map(items, function (item) {
                        if (item.webkitGetAsEntry) {
                            return item.webkitGetAsEntry();
                        }
                        return item.getAsEntry();
                    })
                );
            }
            return $.Deferred().resolve(
                $.makeArray(dataTransfer.files)
            ).promise();
        },

        _getSingleFileInputFiles: function (fileInput) {
            fileInput = $(fileInput);
            var entries = fileInput.prop('webkitEntries') ||
                    fileInput.prop('entries'),
                files,
                value;
            if (entries && entries.length) {
                return this._handleFileTreeEntries(entries);
            }
            files = $.makeArray(fileInput.prop('files'));
            if (!files.length) {
                value = fileInput.prop('value');
                if (!value) {
                    return $.Deferred().resolve([]).promise();
                }
                // If the files property is not available, the browser does not
                // support the File API and we add a pseudo File object with
                // the input value as name with path information removed:
                files = [{name: value.replace(/^.*\\/, '')}];
            }
            return $.Deferred().resolve(files).promise();
        },

        _getFileInputFiles: function (fileInput) {
            if (!(fileInput instanceof $) || fileInput.length === 1) {
                return this._getSingleFileInputFiles(fileInput);
            }
            return $.when.apply(
                $,
                $.map(fileInput, this._getSingleFileInputFiles)
            ).pipe(function () {
                    return Array.prototype.concat.apply(
                        [],
                        arguments
                    );
                });
        },

        _onChange: function (e) {
            var that = e.data.fileupload,
                data = {
                    fileInput: $(e.target),
                    form: $(e.target.form)
                };
            that._getFileInputFiles(data.fileInput).always(function (files) {
                data.files = files;
                if (that.options.replaceFileInput) {
                    that._replaceFileInput(data.fileInput);
                }
                if (that._trigger('change', e, data) !== false) {
                    that._onAdd(e, data);
                }
            });
        },

        _onPaste: function (e) {
            var that = e.data.fileupload,
                cbd = e.originalEvent.clipboardData,
                items = (cbd && cbd.items) || [],
                data = {files: []};
            $.each(items, function (index, item) {
                var file = item.getAsFile && item.getAsFile();
                if (file) {
                    data.files.push(file);
                }
            });
            if (that._trigger('paste', e, data) === false ||
                that._onAdd(e, data) === false) {
                return false;
            }
        },

        _onDrop: function (e) {
            e.preventDefault();
            var that = e.data.fileupload,
                dataTransfer = e.dataTransfer = e.originalEvent.dataTransfer,
                data = {};
            that._getDroppedFiles(dataTransfer).always(function (files) {
                data.files = files;
                if (that._trigger('drop', e, data) !== false) {
                    that._onAdd(e, data);
                }
            });
        },

        _onDragOver: function (e) {
            var that = e.data.fileupload,
                dataTransfer = e.dataTransfer = e.originalEvent.dataTransfer;
            if (that._trigger('dragover', e) === false) {
                return false;
            }
            if (dataTransfer) {
                dataTransfer.dropEffect = 'copy';
            }
            e.preventDefault();
        },

        _initEventHandlers: function () {
            var ns = this.options.namespace;
            if (this._isXHRUpload(this.options)) {
                this.options.dropZone
                    .bind('dragover.' + ns, {fileupload: this}, this._onDragOver)
                    .bind('drop.' + ns, {fileupload: this}, this._onDrop);
                this.options.pasteZone
                    .bind('paste.' + ns, {fileupload: this}, this._onPaste);
            }
            this.options.fileInput
                .bind('change.' + ns, {fileupload: this}, this._onChange);
        },

        _destroyEventHandlers: function () {
            var ns = this.options.namespace;
            this.options.dropZone
                .unbind('dragover.' + ns, this._onDragOver)
                .unbind('drop.' + ns, this._onDrop);
            this.options.pasteZone
                .unbind('paste.' + ns, this._onPaste);
            this.options.fileInput
                .unbind('change.' + ns, this._onChange);
        },

        _setOption: function (key, value) {
            var refresh = $.inArray(key, this._refreshOptionsList) !== -1;
            if (refresh) {
                this._destroyEventHandlers();
            }
            $.Widget.prototype._setOption.call(this, key, value);
            if (refresh) {
                this._initSpecialOptions();
                this._initEventHandlers();
            }
        },

        _initSpecialOptions: function () {
            var options = this.options;
            if (options.fileInput === undefined) {
                options.fileInput = this.element.is('input[type="file"]') ?
                    this.element : this.element.find('input[type="file"]');
            } else if (!(options.fileInput instanceof $)) {
                options.fileInput = $(options.fileInput);
            }
            if (!(options.dropZone instanceof $)) {
                options.dropZone = $(options.dropZone);
            }
            if (!(options.pasteZone instanceof $)) {
                options.pasteZone = $(options.pasteZone);
            }
        },

        _create: function () {
            var options = this.options;
            // Initialize options set via HTML5 data-attributes:
            $.extend(options, $(this.element[0].cloneNode(false)).data());
            options.namespace = options.namespace || this.widgetName;
            this._initSpecialOptions();
            this._slots = [];
            this._sequence = this._getXHRPromise(true);
            this._sending = this._active = this._loaded = this._total = 0;
            this._initEventHandlers();
        },

        destroy: function () {
            this._destroyEventHandlers();
            $.Widget.prototype.destroy.call(this);
        },

        enable: function () {
            var wasDisabled = false;
            if (this.options.disabled) {
                wasDisabled = true;
            }
            $.Widget.prototype.enable.call(this);
            if (wasDisabled) {
                this._initEventHandlers();
            }
        },

        disable: function () {
            if (!this.options.disabled) {
                this._destroyEventHandlers();
            }
            $.Widget.prototype.disable.call(this);
        },

        // This method is exposed to the widget API and allows adding files
        // using the fileupload API. The data parameter accepts an object which
        // must have a files property and can contain additional options:
        // .fileupload('add', {files: filesList});
        add: function (data) {
            var that = this;
            if (!data || this.options.disabled) {
                return;
            }
            if (data.fileInput && !data.files) {
                this._getFileInputFiles(data.fileInput).always(function (files) {
                    data.files = files;
                    that._onAdd(null, data);
                });
            } else {
                data.files = $.makeArray(data.files);
                this._onAdd(null, data);
            }
        },

        // This method is exposed to the widget API and allows sending files
        // using the fileupload API. The data parameter accepts an object which
        // must have a files or fileInput property and can contain additional options:
        // .fileupload('send', {files: filesList});
        // The method returns a Promise object for the file upload call.
        send: function (data) {
            if (data && !this.options.disabled) {
                if (data.fileInput && !data.files) {
                    var that = this,
                        dfd = $.Deferred(),
                        promise = dfd.promise(),
                        jqXHR,
                        aborted;
                    promise.abort = function () {
                        aborted = true;
                        if (jqXHR) {
                            return jqXHR.abort();
                        }
                        dfd.reject(null, 'abort', 'abort');
                        return promise;
                    };
                    this._getFileInputFiles(data.fileInput).always(
                        function (files) {
                            if (aborted) {
                                return;
                            }
                            data.files = files;
                            jqXHR = that._onSend(null, data).then(
                                function (result, textStatus, jqXHR) {
                                    dfd.resolve(result, textStatus, jqXHR);
                                },
                                function (jqXHR, textStatus, errorThrown) {
                                    dfd.reject(jqXHR, textStatus, errorThrown);
                                }
                            );
                        }
                    );
                    return this._enhancePromise(promise);
                }
                data.files = $.makeArray(data.files);
                if (data.files.length) {
                    return this._onSend(null, data);
                }
            }
            return this._getXHRPromise(false, data && data.context);
        }

    });

}));


/* **********************************************
     Begin tag-it.js
********************************************** */

/*
* jQuery UI Tag-it!
*
* @version v2.0 (06/2011)
*
* Copyright 2011, Levy Carneiro Jr.
* Released under the MIT license.
* http://aehlke.github.com/tag-it/LICENSE
*
* Homepage:
*   http://aehlke.github.com/tag-it/
*
* Authors:
*   Levy Carneiro Jr.
*   Martin Rehfeld
*   Tobias Schmidt
*   Skylar Challand
*   Alex Ehlke
*
* Maintainer:
*   Alex Ehlke - Twitter: @aehlke
*
* Dependencies:
*   jQuery v1.4+
*   jQuery UI v1.8+
*/
(function($) {

    $.widget('ui.tagit', {
        options: {
            itemName          : 'item',
            fieldName         : 'tags',
            availableTags     : [],
            tagSource         : null,
            removeConfirmation: false,
            caseSensitive     : true,
            placeholderText   : null,

            // When enabled, quotes are not neccesary
            // for inputting multi-word tags.
            allowSpaces: false,

            // Whether to animate tag removals or not.
            animate: true,

            // The below options are for using a single field instead of several
            // for our form values.
            //
            // When enabled, will use a single hidden field for the form,
            // rather than one per tag. It will delimit tags in the field
            // with singleFieldDelimiter.
            //
            // The easiest way to use singleField is to just instantiate tag-it
            // on an INPUT element, in which case singleField is automatically
            // set to true, and singleFieldNode is set to that element. This 
            // way, you don't need to fiddle with these options.
            singleField: false,

            singleFieldDelimiter: ',',

            // Set this to an input DOM node to use an existing form field.
            // Any text in it will be erased on init. But it will be
            // populated with the text of tags as they are created,
            // delimited by singleFieldDelimiter.
            //
            // If this is not set, we create an input node for it,
            // with the name given in settings.fieldName, 
            // ignoring settings.itemName.
            singleFieldNode: null,

            // Optionally set a tabindex attribute on the input that gets
            // created for tag-it.
            tabIndex: null,


            // Event callbacks.
            onTagAdded  : null,
            onTagRemoved: null,
            onTagClicked: null
        },


        _create: function() {
            // for handling static scoping inside callbacks
            var that = this;

            // There are 2 kinds of DOM nodes this widget can be instantiated on:
            //     1. UL, OL, or some element containing either of these.
            //     2. INPUT, in which case 'singleField' is overridden to true,
            //        a UL is created and the INPUT is hidden.
            if (this.element.is('input')) {
                this.tagList = $('<ul></ul>').insertAfter(this.element);
                this.options.singleField = true;
                this.options.singleFieldNode = this.element;
                this.element.css('display', 'none');
            } else {
                this.tagList = this.element.find('ul, ol').andSelf().last();
            }

            this._tagInput = $('<input type="text" />').addClass('ui-widget-content');
            if (this.options.tabIndex) {
                this._tagInput.attr('tabindex', this.options.tabIndex);
            }
            if (this.options.placeholderText) {
                this._tagInput.attr('placeholder', this.options.placeholderText);
            }

            this.options.tagSource = this.options.tagSource || function(search, showChoices) {
                var filter = search.term.toLowerCase();
                var choices = $.grep(this.options.availableTags, function(element) {
                    // Only match autocomplete options that begin with the search term.
                    // (Case insensitive.)
                    return (element.toLowerCase().indexOf(filter) === 0);
                });
                showChoices(this._subtractArray(choices, this.assignedTags()));
            };

            // Bind tagSource callback functions to this context.
            if ($.isFunction(this.options.tagSource)) {
                this.options.tagSource = $.proxy(this.options.tagSource, this);
            }

            this.tagList
                .addClass('tagit')
                .addClass('ui-widget ui-widget-content ui-corner-all')
                // Create the input field.
                .append($('<li class="tagit-new"></li>').append(this._tagInput))
                .click(function(e) {
                    var target = $(e.target);
                    if (target.hasClass('tagit-label')) {
                        that._trigger('onTagClicked', e, target.closest('.tagit-choice'));
                    } else {
                        // Sets the focus() to the input field, if the user
                        // clicks anywhere inside the UL. This is needed
                        // because the input field needs to be of a small size.
                        that._tagInput.focus();
                    }
                });

            // Add existing tags from the list, if any.
            this.tagList.children('li').each(function() {
                if (!$(this).hasClass('tagit-new')) {
                    that.createTag($(this).html(), $(this).attr('class'));
                    $(this).remove();
                }
            });

            // Single field support.
            if (this.options.singleField) {
                if (this.options.singleFieldNode) {
                    // Add existing tags from the input field.
                    var node = $(this.options.singleFieldNode);
                    var tags = node.val().split(this.options.singleFieldDelimiter);
                    node.val('');
                    $.each(tags, function(index, tag) {
                        that.createTag(tag);
                    });
                } else {
                    // Create our single field input after our list.
                    this.options.singleFieldNode = this.tagList.after('<input type="hidden" style="display:none;" value="" name="' + this.options.fieldName + '" />');
                }
            }

            // Events.
            this._tagInput
                .keydown(function(event) {
                    // Backspace is not detected within a keypress, so it must use keydown.
                    if (event.which == $.ui.keyCode.BACKSPACE && that._tagInput.val() === '') {
                        var tag = that._lastTag();
                        if (!that.options.removeConfirmation || tag.hasClass('remove')) {
                            // When backspace is pressed, the last tag is deleted.
                            that.removeTag(tag);
                        } else if (that.options.removeConfirmation) {
                            tag.addClass('remove ui-state-highlight');
                        }
                    } else if (that.options.removeConfirmation) {
                        that._lastTag().removeClass('remove ui-state-highlight');
                    }

                    // Comma/Space/Enter are all valid delimiters for new tags,
                    // except when there is an open quote or if setting allowSpaces = true.
                    // Tab will also create a tag, unless the tag input is empty, in which case it isn't caught.
                    if (
                        event.which == $.ui.keyCode.COMMA ||
                        event.which == $.ui.keyCode.ENTER ||
                        (
                            event.which == $.ui.keyCode.TAB &&
                            that._tagInput.val() !== ''
                        ) ||
                        (
                            event.which == $.ui.keyCode.SPACE &&
                            that.options.allowSpaces !== true &&
                            (
                                $.trim(that._tagInput.val()).replace( /^s*/, '' ).charAt(0) != '"' ||
                                (
                                    $.trim(that._tagInput.val()).charAt(0) == '"' &&
                                    $.trim(that._tagInput.val()).charAt($.trim(that._tagInput.val()).length - 1) == '"' &&
                                    $.trim(that._tagInput.val()).length - 1 !== 0
                                )
                            )
                        )
                    ) {
                        event.preventDefault();
                        that.createTag(that._cleanedInput());

                        // The autocomplete doesn't close automatically when TAB is pressed.
                        // So let's ensure that it closes.
                        that._tagInput.autocomplete('close');
                    }
                }).blur(function(e){
                    // Create a tag when the element loses focus (unless it's empty).
                    that.createTag(that._cleanedInput());
                });
                

            // Autocomplete.
            if (this.options.availableTags || this.options.tagSource) {
                this._tagInput.autocomplete({
                    source: this.options.tagSource,
                    select: function(event, ui) {
                        // Delete the last tag if we autocomplete something despite the input being empty
                        // This happens because the input's blur event causes the tag to be created when
                        // the user clicks an autocomplete item.
                        // The only artifact of this is that while the user holds down the mouse button
                        // on the selected autocomplete item, a tag is shown with the pre-autocompleted text,
                        // and is changed to the autocompleted text upon mouseup.
                        if (that._tagInput.val() === '') {
                            that.removeTag(that._lastTag(), false);
                        }
                        that.createTag(ui.item.value);
                        // Preventing the tag input to be updated with the chosen value.
                        return false;
                    }
                });
            }
        },

        _cleanedInput: function() {
            // Returns the contents of the tag input, cleaned and ready to be passed to createTag
            return $.trim(this._tagInput.val().replace(/^"(.*)"$/, '$1'));
        },

        _lastTag: function() {
            return this.tagList.children('.tagit-choice:last');
        },

        assignedTags: function() {
            // Returns an array of tag string values
            var that = this;
            var tags = [];
            if (this.options.singleField) {
                tags = $(this.options.singleFieldNode).val().split(this.options.singleFieldDelimiter);
                if (tags[0] === '') {
                    tags = [];
                }
            } else {
                this.tagList.children('.tagit-choice').each(function() {
                    tags.push(that.tagLabel(this));
                });
            }
            return tags;
        },

        _updateSingleTagsField: function(tags) {
            // Takes a list of tag string values, updates this.options.singleFieldNode.val to the tags delimited by this.options.singleFieldDelimiter
            $(this.options.singleFieldNode).val(tags.join(this.options.singleFieldDelimiter));
        },

        _subtractArray: function(a1, a2) {
            var result = [];
            for (var i = 0; i < a1.length; i++) {
                if ($.inArray(a1[i], a2) == -1) {
                    result.push(a1[i]);
                }
            }
            return result;
        },

        tagLabel: function(tag) {
            // Returns the tag's string label.
            if (this.options.singleField) {
                return $(tag).children('.tagit-label').text();
            } else {
                return $(tag).children('input').val();
            }
        },

        _isNew: function(value) {
            var that = this;
            var isNew = true;
            this.tagList.children('.tagit-choice').each(function(i) {
                if (that._formatStr(value) == that._formatStr(that.tagLabel(this))) {
                    isNew = false;
                    return false;
                }
            });
            return isNew;
        },

        _formatStr: function(str) {
            if (this.options.caseSensitive) {
                return str;
            }
            return $.trim(str.toLowerCase());
        },

        createTag: function(value, additionalClass) {
            var that = this;
            // Automatically trims the value of leading and trailing whitespace.
            value = $.trim(value);

            if (!this._isNew(value) || value === '') {
                return false;
            }

            var label = $(this.options.onTagClicked ? '<a class="tagit-label"></a>' : '<span class="tagit-label"></span>').text(value);

            // Create tag.
            var tag = $('<li></li>')
                .addClass('tagit-choice ui-widget-content ui-state-default ui-corner-all')
                .addClass(additionalClass)
                .append(label);

            // Button for removing the tag.
            var removeTagIcon = $('<span></span>')
                .addClass('ui-icon ui-icon-close');
            var removeTag = $('<a><span class="text-icon">\xd7</span></a>') // \xd7 is an X
                .addClass('tagit-close')
                .append(removeTagIcon)
                .click(function(e) {
                    // Removes a tag when the little 'x' is clicked.
                    that.removeTag(tag);
                });
            tag.append(removeTag);

            // Unless options.singleField is set, each tag has a hidden input field inline.
            if (this.options.singleField) {
                var tags = this.assignedTags();
                tags.push(value);
                this._updateSingleTagsField(tags);
            } else {
                var escapedValue = label.html();
                tag.append('<input type="hidden" style="display:none;" value="' + escapedValue + '" name="' + this.options.itemName + '[' + this.options.fieldName + '][]" />');
            }

            this._trigger('onTagAdded', null, tag);

            // Cleaning the input.
            this._tagInput.val('');

            // insert tag
            this._tagInput.parent().before(tag);
        },
        
        removeTag: function(tag, animate) {
            animate = animate || this.options.animate;

            tag = $(tag);

            this._trigger('onTagRemoved', null, tag);

            if (this.options.singleField) {
                var tags = this.assignedTags();
                var removedTagLabel = this.tagLabel(tag);
                tags = $.grep(tags, function(el){
                    return el != removedTagLabel;
                });
                this._updateSingleTagsField(tags);
            }
            // Animate the removal.
            if (animate) {
                tag.fadeOut('fast').hide('blind', {direction: 'horizontal'}, 'fast', function(){
                    tag.remove();
                }).dequeue();
            } else {
                tag.remove();
            }
        },

        removeAll: function() {
            // Removes all tags.
            var that = this;
            this.tagList.children('.tagit-choice').each(function(index, tag) {
                that.removeTag(tag, false);
            });
        }

    });

})(jQuery);




/* **********************************************
     Begin moment.min.js
********************************************** */

// moment.js
// version : 1.7.0
// author : Tim Wood
// license : MIT
// momentjs.com
(function(a,b){function G(a,b,c){this._d=a,this._isUTC=!!b,this._a=a._a||null,a._a=null,this._lang=c||!1}function H(a){var b=this._data={},c=a.years||a.y||0,d=a.months||a.M||0,e=a.weeks||a.w||0,f=a.days||a.d||0,g=a.hours||a.h||0,h=a.minutes||a.m||0,i=a.seconds||a.s||0,j=a.milliseconds||a.ms||0;this._milliseconds=j+i*1e3+h*6e4+g*36e5,this._days=f+e*7,this._months=d+c*12,b.milliseconds=j%1e3,i+=I(j/1e3),b.seconds=i%60,h+=I(i/60),b.minutes=h%60,g+=I(h/60),b.hours=g%24,f+=I(g/24),f+=e*7,b.days=f%30,d+=I(f/30),b.months=d%12,c+=I(d/12),b.years=c,this._lang=!1}function I(a){return a<0?Math.ceil(a):Math.floor(a)}function J(a,b){var c=a+"";while(c.length<b)c="0"+c;return c}function K(a,b,c){var d=b._milliseconds,e=b._days,f=b._months,g;d&&a._d.setTime(+a+d*c),e&&a.date(a.date()+e*c),f&&(g=a.date(),a.date(1).month(a.month()+f*c).date(Math.min(g,a.daysInMonth())))}function L(a){return Object.prototype.toString.call(a)==="[object Array]"}function M(a,b){var c=Math.min(a.length,b.length),d=Math.abs(a.length-b.length),e=0,f;for(f=0;f<c;f++)~~a[f]!==~~b[f]&&e++;return e+d}function N(b,c){var d,e;for(d=1;d<7;d++)b[d]=b[d]==null?d===2?1:0:b[d];return b[7]=c,e=new a(0),c?(e.setUTCFullYear(b[0],b[1],b[2]),e.setUTCHours(b[3],b[4],b[5],b[6])):(e.setFullYear(b[0],b[1],b[2]),e.setHours(b[3],b[4],b[5],b[6])),e._a=b,e}function O(a,b){var d,e,f=[];!b&&i&&(b=require("./lang/"+a));for(d=0;d<j.length;d++)b[j[d]]=b[j[d]]||g.en[j[d]];for(d=0;d<12;d++)e=c([2e3,d]),f[d]=new RegExp("^"+(b.months[d]||b.months(e,""))+"|^"+(b.monthsShort[d]||b.monthsShort(e,"")).replace(".",""),"i");return b.monthsParse=b.monthsParse||f,g[a]=b,b}function P(a){var b=typeof a=="string"&&a||a&&a._lang||null;return b?g[b]||O(b):c}function Q(a){return D[a]?"'+("+D[a]+")+'":a.replace(n,"").replace(/\\?'/g,"\\'")}function R(a){return P().longDateFormat[a]||a}function S(a){var b="var a,b;return '"+a.replace(l,Q)+"';",c=Function;return new c("t","v","o","p","m",b)}function T(a){return C[a]||(C[a]=S(a)),C[a]}function U(a,b){function d(d,e){return c[d].call?c[d](a,b):c[d][e]}var c=P(a);while(m.test(b))b=b.replace(m,R);return C[b]||(C[b]=S(b)),C[b](a,d,c.ordinal,J,c.meridiem)}function V(a){switch(a){case"DDDD":return r;case"YYYY":return s;case"S":case"SS":case"SSS":case"DDD":return q;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":case"a":case"A":return t;case"Z":case"ZZ":return u;case"T":return v;case"MM":case"DD":case"YY":case"HH":case"hh":case"mm":case"ss":case"M":case"D":case"d":case"H":case"h":case"m":case"s":return p;default:return new RegExp(a.replace("\\",""))}}function W(a,b,c,d){var e;switch(a){case"M":case"MM":c[1]=b==null?0:~~b-1;break;case"MMM":case"MMMM":for(e=0;e<12;e++)if(P().monthsParse[e].test(b)){c[1]=e;break}break;case"D":case"DD":case"DDD":case"DDDD":b!=null&&(c[2]=~~b);break;case"YY":b=~~b,c[0]=b+(b>70?1900:2e3);break;case"YYYY":c[0]=~~Math.abs(b);break;case"a":case"A":d.isPm=(b+"").toLowerCase()==="pm";break;case"H":case"HH":case"h":case"hh":c[3]=~~b;break;case"m":case"mm":c[4]=~~b;break;case"s":case"ss":c[5]=~~b;break;case"S":case"SS":case"SSS":c[6]=~~(("0."+b)*1e3);break;case"Z":case"ZZ":d.isUTC=!0,e=(b+"").match(z),e&&e[1]&&(d.tzh=~~e[1]),e&&e[2]&&(d.tzm=~~e[2]),e&&e[0]==="+"&&(d.tzh=-d.tzh,d.tzm=-d.tzm)}}function X(a,b){var c=[0,0,1,0,0,0,0],d={tzh:0,tzm:0},e=b.match(l),f,g;for(f=0;f<e.length;f++)g=(V(e[f]).exec(a)||[])[0],a=a.replace(V(e[f]),""),W(e[f],g,c,d);return d.isPm&&c[3]<12&&(c[3]+=12),d.isPm===!1&&c[3]===12&&(c[3]=0),c[3]+=d.tzh,c[4]+=d.tzm,N(c,d.isUTC)}function Y(a,b){var c,d=a.match(o)||[],e,f=99,g,h,i;for(g=0;g<b.length;g++)h=X(a,b[g]),e=U(new G(h),b[g]).match(o)||[],i=M(d,e),i<f&&(f=i,c=h);return c}function Z(b){var c="YYYY-MM-DDT",d;if(w.exec(b)){for(d=0;d<4;d++)if(y[d][1].exec(b)){c+=y[d][0];break}return u.exec(b)?X(b,c+" Z"):X(b,c)}return new a(b)}function $(a,b,c,d,e){var f=e.relativeTime[a];return typeof f=="function"?f(b||1,!!c,a,d):f.replace(/%d/i,b||1)}function _(a,b,c){var d=e(Math.abs(a)/1e3),f=e(d/60),g=e(f/60),h=e(g/24),i=e(h/365),j=d<45&&["s",d]||f===1&&["m"]||f<45&&["mm",f]||g===1&&["h"]||g<22&&["hh",g]||h===1&&["d"]||h<=25&&["dd",h]||h<=45&&["M"]||h<345&&["MM",e(h/30)]||i===1&&["y"]||["yy",i];return j[2]=b,j[3]=a>0,j[4]=c,$.apply({},j)}function ab(a,b){c.fn[a]=function(a){var c=this._isUTC?"UTC":"";return a!=null?(this._d["set"+c+b](a),this):this._d["get"+c+b]()}}function bb(a){c.duration.fn[a]=function(){return this._data[a]}}function cb(a,b){c.duration.fn["as"+a]=function(){return+this/b}}var c,d="1.7.0",e=Math.round,f,g={},h="en",i=typeof module!="undefined"&&module.exports,j="months|monthsShort|weekdays|weekdaysShort|weekdaysMin|longDateFormat|calendar|relativeTime|ordinal|meridiem".split("|"),k=/^\/?Date\((\-?\d+)/i,l=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?)/g,m=/(LT|LL?L?L?)/g,n=/(^\[)|(\\)|\]$/g,o=/([0-9a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)/gi,p=/\d\d?/,q=/\d{1,3}/,r=/\d{3}/,s=/\d{1,4}/,t=/[0-9a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+/i,u=/Z|[\+\-]\d\d:?\d\d/i,v=/T/i,w=/^\s*\d{4}-\d\d-\d\d(T(\d\d(:\d\d(:\d\d(\.\d\d?\d?)?)?)?)?([\+\-]\d\d:?\d\d)?)?/,x="YYYY-MM-DDTHH:mm:ssZ",y=[["HH:mm:ss.S",/T\d\d:\d\d:\d\d\.\d{1,3}/],["HH:mm:ss",/T\d\d:\d\d:\d\d/],["HH:mm",/T\d\d:\d\d/],["HH",/T\d\d/]],z=/([\+\-]|\d\d)/gi,A="Month|Date|Hours|Minutes|Seconds|Milliseconds".split("|"),B={Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6},C={},D={M:"(a=t.month()+1)",MMM:'v("monthsShort",t.month())',MMMM:'v("months",t.month())',D:"(a=t.date())",DDD:"(a=new Date(t.year(),t.month(),t.date()),b=new Date(t.year(),0,1),a=~~(((a-b)/864e5)+1.5))",d:"(a=t.day())",dd:'v("weekdaysMin",t.day())',ddd:'v("weekdaysShort",t.day())',dddd:'v("weekdays",t.day())',w:"(a=new Date(t.year(),t.month(),t.date()-t.day()+5),b=new Date(a.getFullYear(),0,4),a=~~((a-b)/864e5/7+1.5))",YY:"p(t.year()%100,2)",YYYY:"p(t.year(),4)",a:"m(t.hours(),t.minutes(),!0)",A:"m(t.hours(),t.minutes(),!1)",H:"t.hours()",h:"t.hours()%12||12",m:"t.minutes()",s:"t.seconds()",S:"~~(t.milliseconds()/100)",SS:"p(~~(t.milliseconds()/10),2)",SSS:"p(t.milliseconds(),3)",Z:'((a=-t.zone())<0?((a=-a),"-"):"+")+p(~~(a/60),2)+":"+p(~~a%60,2)',ZZ:'((a=-t.zone())<0?((a=-a),"-"):"+")+p(~~(10*a/6),4)'},E="DDD w M D d".split(" "),F="M D H h m s w".split(" ");while(E.length)f=E.pop(),D[f+"o"]=D[f]+"+o(a)";while(F.length)f=F.pop(),D[f+f]="p("+D[f]+",2)";D.DDDD="p("+D.DDD+",3)",c=function(d,e){if(d===null||d==="")return null;var f,g;return c.isMoment(d)?new G(new a(+d._d),d._isUTC,d._lang):(e?L(e)?f=Y(d,e):f=X(d,e):(g=k.exec(d),f=d===b?new a:g?new a(+g[1]):d instanceof a?d:L(d)?N(d):typeof d=="string"?Z(d):new a(d)),new G(f))},c.utc=function(a,b){return L(a)?new G(N(a,!0),!0):(typeof a=="string"&&!u.exec(a)&&(a+=" +0000",b&&(b+=" Z")),c(a,b).utc())},c.unix=function(a){return c(a*1e3)},c.duration=function(a,b){var d=c.isDuration(a),e=typeof a=="number",f=d?a._data:e?{}:a,g;return e&&(b?f[b]=a:f.milliseconds=a),g=new H(f),d&&(g._lang=a._lang),g},c.humanizeDuration=function(a,b,d){return c.duration(a,b===!0?null:b).humanize(b===!0?!0:d)},c.version=d,c.defaultFormat=x,c.lang=function(a,b){var d;if(!a)return h;(b||!g[a])&&O(a,b);if(g[a]){for(d=0;d<j.length;d++)c[j[d]]=g[a][j[d]];c.monthsParse=g[a].monthsParse,h=a}},c.langData=P,c.isMoment=function(a){return a instanceof G},c.isDuration=function(a){return a instanceof H},c.lang("en",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D YYYY",LLL:"MMMM D YYYY LT",LLLL:"dddd, MMMM D YYYY LT"},meridiem:function(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinal:function(a){var b=a%10;return~~(a%100/10)===1?"th":b===1?"st":b===2?"nd":b===3?"rd":"th"}}),c.fn=G.prototype={clone:function(){return c(this)},valueOf:function(){return+this._d},unix:function(){return Math.floor(+this._d/1e3)},toString:function(){return this._d.toString()},toDate:function(){return this._d},toArray:function(){var a=this;return[a.year(),a.month(),a.date(),a.hours(),a.minutes(),a.seconds(),a.milliseconds(),!!this._isUTC]},isValid:function(){return this._a?!M(this._a,(this._a[7]?c.utc(this):this).toArray()):!isNaN(this._d.getTime())},utc:function(){return this._isUTC=!0,this},local:function(){return this._isUTC=!1,this},format:function(a){return U(this,a?a:c.defaultFormat)},add:function(a,b){var d=b?c.duration(+b,a):c.duration(a);return K(this,d,1),this},subtract:function(a,b){var d=b?c.duration(+b,a):c.duration(a);return K(this,d,-1),this},diff:function(a,b,d){var f=this._isUTC?c(a).utc():c(a).local(),g=(this.zone()-f.zone())*6e4,h=this._d-f._d-g,i=this.year()-f.year(),j=this.month()-f.month(),k=this.date()-f.date(),l;return b==="months"?l=i*12+j+k/30:b==="years"?l=i+(j+k/30)/12:l=b==="seconds"?h/1e3:b==="minutes"?h/6e4:b==="hours"?h/36e5:b==="days"?h/864e5:b==="weeks"?h/6048e5:h,d?l:e(l)},from:function(a,b){return c.duration(this.diff(a)).lang(this._lang).humanize(!b)},fromNow:function(a){return this.from(c(),a)},calendar:function(){var a=this.diff(c().sod(),"days",!0),b=this.lang().calendar,d=b.sameElse,e=a<-6?d:a<-1?b.lastWeek:a<0?b.lastDay:a<1?b.sameDay:a<2?b.nextDay:a<7?b.nextWeek:d;return this.format(typeof e=="function"?e.apply(this):e)},isLeapYear:function(){var a=this.year();return a%4===0&&a%100!==0||a%400===0},isDST:function(){return this.zone()<c([this.year()]).zone()||this.zone()<c([this.year(),5]).zone()},day:function(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return a==null?b:this.add({d:a-b})},startOf:function(a){switch(a.replace(/s$/,"")){case"year":this.month(0);case"month":this.date(1);case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return this},endOf:function(a){return this.startOf(a).add(a.replace(/s?$/,"s"),1).subtract("ms",1)},sod:function(){return this.clone().startOf("day")},eod:function(){return this.clone().endOf("day")},zone:function(){return this._isUTC?0:this._d.getTimezoneOffset()},daysInMonth:function(){return c.utc([this.year(),this.month()+1,0]).date()},lang:function(a){return a===b?P(this):(this._lang=a,this)}};for(f=0;f<A.length;f++)ab(A[f].toLowerCase(),A[f]);ab("year","FullYear"),c.duration.fn=H.prototype={weeks:function(){return I(this.days()/7)},valueOf:function(){return this._milliseconds+this._days*864e5+this._months*2592e6},humanize:function(a){var b=+this,c=this.lang().relativeTime,d=_(b,!a,this.lang());return a&&(d=(b<=0?c.past:c.future).replace(/%s/i,d)),d},lang:c.fn.lang};for(f in B)B.hasOwnProperty(f)&&(cb(f,B[f]),bb(f.toLowerCase()));cb("Weeks",6048e5),i&&(module.exports=c),typeof ender=="undefined"&&(this.moment=c),typeof define=="function"&&define.amd&&define("moment",[],function(){return c})}).call(this,Date);

/* **********************************************
     Begin shadowbox.js
********************************************** */

/*
 * Shadowbox.js, version 3.0.3
 * http://shadowbox-js.com/
 *
 * Copyright 2007-2010, Michael J. I. Jackson
 * Date: 2011-05-23 08:16:13 +0000
 */
(function(au,k){var Q={version:"3.0.3"};var J=navigator.userAgent.toLowerCase();if(J.indexOf("windows")>-1||J.indexOf("win32")>-1){Q.isWindows=true}else{if(J.indexOf("macintosh")>-1||J.indexOf("mac os x")>-1){Q.isMac=true}else{if(J.indexOf("linux")>-1){Q.isLinux=true}}}Q.isIE=J.indexOf("msie")>-1;Q.isIE6=J.indexOf("msie 6")>-1;Q.isIE7=J.indexOf("msie 7")>-1;Q.isGecko=J.indexOf("gecko")>-1&&J.indexOf("safari")==-1;Q.isWebKit=J.indexOf("applewebkit/")>-1;var ab=/#(.+)$/,af=/^(light|shadow)box\[(.*?)\]/i,az=/\s*([a-z_]*?)\s*=\s*(.+)\s*/,f=/[0-9a-z]+$/i,aD=/(.+\/)shadowbox\.js/i;var A=false,a=false,l={},z=0,R,ap;Q.current=-1;Q.dimensions=null;Q.ease=function(K){return 1+Math.pow(K-1,3)};Q.errorInfo={fla:{name:"Flash",url:"http://www.adobe.com/products/flashplayer/"},qt:{name:"QuickTime",url:"http://www.apple.com/quicktime/download/"},wmp:{name:"Windows Media Player",url:"http://www.microsoft.com/windows/windowsmedia/"},f4m:{name:"Flip4Mac",url:"http://www.flip4mac.com/wmv_download.htm"}};Q.gallery=[];Q.onReady=aj;Q.path=null;Q.player=null;Q.playerId="sb-player";Q.options={animate:true,animateFade:true,autoplayMovies:true,continuous:false,enableKeys:true,flashParams:{bgcolor:"#000000",allowfullscreen:true},flashVars:{},flashVersion:"9.0.115",handleOversize:"resize",handleUnsupported:"link",onChange:aj,onClose:aj,onFinish:aj,onOpen:aj,showMovieControls:true,skipSetup:false,slideshowDelay:0,viewportPadding:20};Q.getCurrent=function(){return Q.current>-1?Q.gallery[Q.current]:null};Q.hasNext=function(){return Q.gallery.length>1&&(Q.current!=Q.gallery.length-1||Q.options.continuous)};Q.isOpen=function(){return A};Q.isPaused=function(){return ap=="pause"};Q.applyOptions=function(K){l=aC({},Q.options);aC(Q.options,K)};Q.revertOptions=function(){aC(Q.options,l)};Q.init=function(aG,aJ){if(a){return}a=true;if(Q.skin.options){aC(Q.options,Q.skin.options)}if(aG){aC(Q.options,aG)}if(!Q.path){var aI,S=document.getElementsByTagName("script");for(var aH=0,K=S.length;aH<K;++aH){aI=aD.exec(S[aH].src);if(aI){Q.path=aI[1];break}}}if(aJ){Q.onReady=aJ}P()};Q.open=function(S){if(A){return}var K=Q.makeGallery(S);Q.gallery=K[0];Q.current=K[1];S=Q.getCurrent();if(S==null){return}Q.applyOptions(S.options||{});G();if(Q.gallery.length){S=Q.getCurrent();if(Q.options.onOpen(S)===false){return}A=true;Q.skin.onOpen(S,c)}};Q.close=function(){if(!A){return}A=false;if(Q.player){Q.player.remove();Q.player=null}if(typeof ap=="number"){clearTimeout(ap);ap=null}z=0;aq(false);Q.options.onClose(Q.getCurrent());Q.skin.onClose();Q.revertOptions()};Q.play=function(){if(!Q.hasNext()){return}if(!z){z=Q.options.slideshowDelay*1000}if(z){R=aw();ap=setTimeout(function(){z=R=0;Q.next()},z);if(Q.skin.onPlay){Q.skin.onPlay()}}};Q.pause=function(){if(typeof ap!="number"){return}z=Math.max(0,z-(aw()-R));if(z){clearTimeout(ap);ap="pause";if(Q.skin.onPause){Q.skin.onPause()}}};Q.change=function(K){if(!(K in Q.gallery)){if(Q.options.continuous){K=(K<0?Q.gallery.length+K:0);if(!(K in Q.gallery)){return}}else{return}}Q.current=K;if(typeof ap=="number"){clearTimeout(ap);ap=null;z=R=0}Q.options.onChange(Q.getCurrent());c(true)};Q.next=function(){Q.change(Q.current+1)};Q.previous=function(){Q.change(Q.current-1)};Q.setDimensions=function(aS,aJ,aQ,aR,aI,K,aO,aL){var aN=aS,aH=aJ;var aM=2*aO+aI;if(aS+aM>aQ){aS=aQ-aM}var aG=2*aO+K;if(aJ+aG>aR){aJ=aR-aG}var S=(aN-aS)/aN,aP=(aH-aJ)/aH,aK=(S>0||aP>0);if(aL&&aK){if(S>aP){aJ=Math.round((aH/aN)*aS)}else{if(aP>S){aS=Math.round((aN/aH)*aJ)}}}Q.dimensions={height:aS+aI,width:aJ+K,innerHeight:aS,innerWidth:aJ,top:Math.floor((aQ-(aS+aM))/2+aO),left:Math.floor((aR-(aJ+aG))/2+aO),oversized:aK};return Q.dimensions};Q.makeGallery=function(aI){var K=[],aH=-1;if(typeof aI=="string"){aI=[aI]}if(typeof aI.length=="number"){aF(aI,function(aK,aL){if(aL.content){K[aK]=aL}else{K[aK]={content:aL}}});aH=0}else{if(aI.tagName){var S=Q.getCache(aI);aI=S?S:Q.makeObject(aI)}if(aI.gallery){K=[];var aJ;for(var aG in Q.cache){aJ=Q.cache[aG];if(aJ.gallery&&aJ.gallery==aI.gallery){if(aH==-1&&aJ.content==aI.content){aH=K.length}K.push(aJ)}}if(aH==-1){K.unshift(aI);aH=0}}else{K=[aI];aH=0}}aF(K,function(aK,aL){K[aK]=aC({},aL)});return[K,aH]};Q.makeObject=function(aH,aG){var aI={content:aH.href,title:aH.getAttribute("title")||"",link:aH};if(aG){aG=aC({},aG);aF(["player","title","height","width","gallery"],function(aJ,aK){if(typeof aG[aK]!="undefined"){aI[aK]=aG[aK];delete aG[aK]}});aI.options=aG}else{aI.options={}}if(!aI.player){aI.player=Q.getPlayer(aI.content)}var K=aH.getAttribute("rel");if(K){var S=K.match(af);if(S){aI.gallery=escape(S[2])}aF(K.split(";"),function(aJ,aK){S=aK.match(az);if(S){aI[S[1]]=S[2]}})}return aI};Q.getPlayer=function(aG){if(aG.indexOf("#")>-1&&aG.indexOf(document.location.href)==0){return"inline"}var aH=aG.indexOf("?");if(aH>-1){aG=aG.substring(0,aH)}var S,K=aG.match(f);if(K){S=K[0].toLowerCase()}if(S){if(Q.img&&Q.img.ext.indexOf(S)>-1){return"img"}if(Q.swf&&Q.swf.ext.indexOf(S)>-1){return"swf"}if(Q.flv&&Q.flv.ext.indexOf(S)>-1){return"flv"}if(Q.qt&&Q.qt.ext.indexOf(S)>-1){if(Q.wmp&&Q.wmp.ext.indexOf(S)>-1){return"qtwmp"}else{return"qt"}}if(Q.wmp&&Q.wmp.ext.indexOf(S)>-1){return"wmp"}}return"iframe"};function G(){var aH=Q.errorInfo,aI=Q.plugins,aK,aL,aO,aG,aN,S,aM,K;for(var aJ=0;aJ<Q.gallery.length;++aJ){aK=Q.gallery[aJ];aL=false;aO=null;switch(aK.player){case"flv":case"swf":if(!aI.fla){aO="fla"}break;case"qt":if(!aI.qt){aO="qt"}break;case"wmp":if(Q.isMac){if(aI.qt&&aI.f4m){aK.player="qt"}else{aO="qtf4m"}}else{if(!aI.wmp){aO="wmp"}}break;case"qtwmp":if(aI.qt){aK.player="qt"}else{if(aI.wmp){aK.player="wmp"}else{aO="qtwmp"}}break}if(aO){if(Q.options.handleUnsupported=="link"){switch(aO){case"qtf4m":aN="shared";S=[aH.qt.url,aH.qt.name,aH.f4m.url,aH.f4m.name];break;case"qtwmp":aN="either";S=[aH.qt.url,aH.qt.name,aH.wmp.url,aH.wmp.name];break;default:aN="single";S=[aH[aO].url,aH[aO].name]}aK.player="html";aK.content='<div class="sb-message">'+s(Q.lang.errors[aN],S)+"</div>"}else{aL=true}}else{if(aK.player=="inline"){aG=ab.exec(aK.content);if(aG){aM=ad(aG[1]);if(aM){aK.content=aM.innerHTML}else{aL=true}}else{aL=true}}else{if(aK.player=="swf"||aK.player=="flv"){K=(aK.options&&aK.options.flashVersion)||Q.options.flashVersion;if(Q.flash&&!Q.flash.hasFlashPlayerVersion(K)){aK.width=310;aK.height=177}}}}if(aL){Q.gallery.splice(aJ,1);if(aJ<Q.current){--Q.current}else{if(aJ==Q.current){Q.current=aJ>0?aJ-1:aJ}}--aJ}}}function aq(K){if(!Q.options.enableKeys){return}(K?F:M)(document,"keydown",an)}function an(aG){if(aG.metaKey||aG.shiftKey||aG.altKey||aG.ctrlKey){return}var S=v(aG),K;switch(S){case 81:case 88:case 27:K=Q.close;break;case 37:K=Q.previous;break;case 39:K=Q.next;break;case 32:K=typeof ap=="number"?Q.pause:Q.play;break}if(K){n(aG);K()}}function c(aK){aq(false);var aJ=Q.getCurrent();var aG=(aJ.player=="inline"?"html":aJ.player);if(typeof Q[aG]!="function"){throw"unknown player "+aG}if(aK){Q.player.remove();Q.revertOptions();Q.applyOptions(aJ.options||{})}Q.player=new Q[aG](aJ,Q.playerId);if(Q.gallery.length>1){var aH=Q.gallery[Q.current+1]||Q.gallery[0];if(aH.player=="img"){var S=new Image();S.src=aH.content}var aI=Q.gallery[Q.current-1]||Q.gallery[Q.gallery.length-1];if(aI.player=="img"){var K=new Image();K.src=aI.content}}Q.skin.onLoad(aK,W)}function W(){if(!A){return}if(typeof Q.player.ready!="undefined"){var K=setInterval(function(){if(A){if(Q.player.ready){clearInterval(K);K=null;Q.skin.onReady(e)}}else{clearInterval(K);K=null}},10)}else{Q.skin.onReady(e)}}function e(){if(!A){return}Q.player.append(Q.skin.body,Q.dimensions);Q.skin.onShow(I)}function I(){if(!A){return}if(Q.player.onLoad){Q.player.onLoad()}Q.options.onFinish(Q.getCurrent());if(!Q.isPaused()){Q.play()}aq(true)}if(!Array.prototype.indexOf){Array.prototype.indexOf=function(S,aG){var K=this.length>>>0;aG=aG||0;if(aG<0){aG+=K}for(;aG<K;++aG){if(aG in this&&this[aG]===S){return aG}}return -1}}function aw(){return(new Date).getTime()}function aC(K,aG){for(var S in aG){K[S]=aG[S]}return K}function aF(aH,aI){var S=0,K=aH.length;for(var aG=aH[0];S<K&&aI.call(aG,S,aG)!==false;aG=aH[++S]){}}function s(S,K){return S.replace(/\{(\w+?)\}/g,function(aG,aH){return K[aH]})}function aj(){}function ad(K){return document.getElementById(K)}function C(K){K.parentNode.removeChild(K)}var h=true,x=true;function d(){var K=document.body,S=document.createElement("div");h=typeof S.style.opacity==="string";S.style.position="fixed";S.style.margin=0;S.style.top="20px";K.appendChild(S,K.firstChild);x=S.offsetTop==20;K.removeChild(S)}Q.getStyle=(function(){var K=/opacity=([^)]*)/,S=document.defaultView&&document.defaultView.getComputedStyle;return function(aJ,aI){var aH;if(!h&&aI=="opacity"&&aJ.currentStyle){aH=K.test(aJ.currentStyle.filter||"")?(parseFloat(RegExp.$1)/100)+"":"";return aH===""?"1":aH}if(S){var aG=S(aJ,null);if(aG){aH=aG[aI]}if(aI=="opacity"&&aH==""){aH="1"}}else{aH=aJ.currentStyle[aI]}return aH}})();Q.appendHTML=function(aG,S){if(aG.insertAdjacentHTML){aG.insertAdjacentHTML("BeforeEnd",S)}else{if(aG.lastChild){var K=aG.ownerDocument.createRange();K.setStartAfter(aG.lastChild);var aH=K.createContextualFragment(S);aG.appendChild(aH)}else{aG.innerHTML=S}}};Q.getWindowSize=function(K){if(document.compatMode==="CSS1Compat"){return document.documentElement["client"+K]}return document.body["client"+K]};Q.setOpacity=function(aG,K){var S=aG.style;if(h){S.opacity=(K==1?"":K)}else{S.zoom=1;if(K==1){if(typeof S.filter=="string"&&(/alpha/i).test(S.filter)){S.filter=S.filter.replace(/\s*[\w\.]*alpha\([^\)]*\);?/gi,"")}}else{S.filter=(S.filter||"").replace(/\s*[\w\.]*alpha\([^\)]*\)/gi,"")+" alpha(opacity="+(K*100)+")"}}};Q.clearOpacity=function(K){Q.setOpacity(K,1)};function o(K){return K.target}function V(K){return[K.pageX,K.pageY]}function n(K){K.preventDefault()}function v(K){return K.keyCode}function F(aG,S,K){jQuery(aG).bind(S,K)}function M(aG,S,K){jQuery(aG).unbind(S,K)}jQuery.fn.shadowbox=function(K){return this.each(function(){var aG=jQuery(this);var aH=jQuery.extend({},K||{},jQuery.metadata?aG.metadata():jQuery.meta?aG.data():{});var S=this.className||"";aH.width=parseInt((S.match(/w:(\d+)/)||[])[1])||aH.width;aH.height=parseInt((S.match(/h:(\d+)/)||[])[1])||aH.height;Shadowbox.setup(aG,aH)})};var y=false,al;if(document.addEventListener){al=function(){document.removeEventListener("DOMContentLoaded",al,false);Q.load()}}else{if(document.attachEvent){al=function(){if(document.readyState==="complete"){document.detachEvent("onreadystatechange",al);Q.load()}}}}function g(){if(y){return}try{document.documentElement.doScroll("left")}catch(K){setTimeout(g,1);return}Q.load()}function P(){if(document.readyState==="complete"){return Q.load()}if(document.addEventListener){document.addEventListener("DOMContentLoaded",al,false);au.addEventListener("load",Q.load,false)}else{if(document.attachEvent){document.attachEvent("onreadystatechange",al);au.attachEvent("onload",Q.load);var K=false;try{K=au.frameElement===null}catch(S){}if(document.documentElement.doScroll&&K){g()}}}}Q.load=function(){if(y){return}if(!document.body){return setTimeout(Q.load,13)}y=true;d();Q.onReady();if(!Q.options.skipSetup){Q.setup()}Q.skin.init()};Q.plugins={};if(navigator.plugins&&navigator.plugins.length){var w=[];aF(navigator.plugins,function(K,S){w.push(S.name)});w=w.join(",");var ai=w.indexOf("Flip4Mac")>-1;Q.plugins={fla:w.indexOf("Shockwave Flash")>-1,qt:w.indexOf("QuickTime")>-1,wmp:!ai&&w.indexOf("Windows Media")>-1,f4m:ai}}else{var p=function(K){var S;try{S=new ActiveXObject(K)}catch(aG){}return !!S};Q.plugins={fla:p("ShockwaveFlash.ShockwaveFlash"),qt:p("QuickTime.QuickTime"),wmp:p("wmplayer.ocx"),f4m:false}}var X=/^(light|shadow)box/i,am="shadowboxCacheKey",b=1;Q.cache={};Q.select=function(S){var aG=[];if(!S){var K;aF(document.getElementsByTagName("a"),function(aJ,aK){K=aK.getAttribute("rel");if(K&&X.test(K)){aG.push(aK)}})}else{var aI=S.length;if(aI){if(typeof S=="string"){if(Q.find){aG=Q.find(S)}}else{if(aI==2&&typeof S[0]=="string"&&S[1].nodeType){if(Q.find){aG=Q.find(S[0],S[1])}}else{for(var aH=0;aH<aI;++aH){aG[aH]=S[aH]}}}}else{aG.push(S)}}return aG};Q.setup=function(K,S){aF(Q.select(K),function(aG,aH){Q.addCache(aH,S)})};Q.teardown=function(K){aF(Q.select(K),function(S,aG){Q.removeCache(aG)})};Q.addCache=function(aG,K){var S=aG[am];if(S==k){S=b++;aG[am]=S;F(aG,"click",u)}Q.cache[S]=Q.makeObject(aG,K)};Q.removeCache=function(K){M(K,"click",u);delete Q.cache[K[am]];K[am]=null};Q.getCache=function(S){var K=S[am];return(K in Q.cache&&Q.cache[K])};Q.clearCache=function(){for(var K in Q.cache){Q.removeCache(Q.cache[K].link)}Q.cache={}};function u(K){Q.open(this);if(Q.gallery.length){n(K)}}Q.lang={code:"en",of:"of",loading:"loading",cancel:"Cancel",next:"Next",previous:"Previous",play:"Play",pause:"Pause",close:"Close",errors:{single:'You must install the <a href="{0}">{1}</a> browser plugin to view this content.',shared:'You must install both the <a href="{0}">{1}</a> and <a href="{2}">{3}</a> browser plugins to view this content.',either:'You must install either the <a href="{0}">{1}</a> or the <a href="{2}">{3}</a> browser plugin to view this content.'}};var D,at="sb-drag-proxy",E,j,ag;function ax(){E={x:0,y:0,startX:null,startY:null}}function aA(){var K=Q.dimensions;aC(j.style,{height:K.innerHeight+"px",width:K.innerWidth+"px"})}function O(){ax();var K=["position:absolute","cursor:"+(Q.isGecko?"-moz-grab":"move"),"background-color:"+(Q.isIE?"#fff;filter:alpha(opacity=0)":"transparent")].join(";");Q.appendHTML(Q.skin.body,'<div id="'+at+'" style="'+K+'"></div>');j=ad(at);aA();F(j,"mousedown",L)}function B(){if(j){M(j,"mousedown",L);C(j);j=null}ag=null}function L(S){n(S);var K=V(S);E.startX=K[0];E.startY=K[1];ag=ad(Q.player.id);F(document,"mousemove",H);F(document,"mouseup",i);if(Q.isGecko){j.style.cursor="-moz-grabbing"}}function H(aI){var K=Q.player,aJ=Q.dimensions,aH=V(aI);var aG=aH[0]-E.startX;E.startX+=aG;E.x=Math.max(Math.min(0,E.x+aG),aJ.innerWidth-K.width);var S=aH[1]-E.startY;E.startY+=S;E.y=Math.max(Math.min(0,E.y+S),aJ.innerHeight-K.height);aC(ag.style,{left:E.x+"px",top:E.y+"px"})}function i(){M(document,"mousemove",H);M(document,"mouseup",i);if(Q.isGecko){j.style.cursor="-moz-grab"}}Q.img=function(S,aG){this.obj=S;this.id=aG;this.ready=false;var K=this;D=new Image();D.onload=function(){K.height=S.height?parseInt(S.height,10):D.height;K.width=S.width?parseInt(S.width,10):D.width;K.ready=true;D.onload=null;D=null};D.src=S.content};Q.img.ext=["bmp","gif","jpg","jpeg","png"];Q.img.prototype={append:function(S,aI){var aG=document.createElement("img");aG.id=this.id;aG.src=this.obj.content;aG.style.position="absolute";var K,aH;if(aI.oversized&&Q.options.handleOversize=="resize"){K=aI.innerHeight;aH=aI.innerWidth}else{K=this.height;aH=this.width}aG.setAttribute("height",K);aG.setAttribute("width",aH);S.appendChild(aG)},remove:function(){var K=ad(this.id);if(K){C(K)}B();if(D){D.onload=null;D=null}},onLoad:function(){var K=Q.dimensions;if(K.oversized&&Q.options.handleOversize=="drag"){O()}},onWindowResize:function(){var aH=Q.dimensions;switch(Q.options.handleOversize){case"resize":var K=ad(this.id);K.height=aH.innerHeight;K.width=aH.innerWidth;break;case"drag":if(ag){var aG=parseInt(Q.getStyle(ag,"top")),S=parseInt(Q.getStyle(ag,"left"));if(aG+this.height<aH.innerHeight){ag.style.top=aH.innerHeight-this.height+"px"}if(S+this.width<aH.innerWidth){ag.style.left=aH.innerWidth-this.width+"px"}aA()}break}}};Q.iframe=function(S,aG){this.obj=S;this.id=aG;var K=ad("sb-overlay");this.height=S.height?parseInt(S.height,10):K.offsetHeight;this.width=S.width?parseInt(S.width,10):K.offsetWidth};Q.iframe.prototype={append:function(K,aG){var S='<iframe id="'+this.id+'" name="'+this.id+'" height="100%" width="100%" frameborder="0" marginwidth="0" marginheight="0" style="visibility:hidden" onload="this.style.visibility=\'visible\'" scrolling="auto"';if(Q.isIE){S+=' allowtransparency="true"';if(Q.isIE6){S+=" src=\"javascript:false;document.write('');\""}}S+="></iframe>";K.innerHTML=S},remove:function(){var K=ad(this.id);if(K){C(K);if(Q.isGecko){delete au.frames[this.id]}}},onLoad:function(){var K=Q.isIE?ad(this.id).contentWindow:au.frames[this.id];K.location.href=this.obj.content}};var ao=false,Y=[],q=["sb-nav-close","sb-nav-next","sb-nav-play","sb-nav-pause","sb-nav-previous"],aa,ae,Z,m=true;function N(aG,aQ,aN,aL,aR){var K=(aQ=="opacity"),aM=K?Q.setOpacity:function(aS,aT){aS.style[aQ]=""+aT+"px"};if(aL==0||(!K&&!Q.options.animate)||(K&&!Q.options.animateFade)){aM(aG,aN);if(aR){aR()}return}var aO=parseFloat(Q.getStyle(aG,aQ))||0;var aP=aN-aO;if(aP==0){if(aR){aR()}return}aL*=1000;var aH=aw(),aK=Q.ease,aJ=aH+aL,aI;var S=setInterval(function(){aI=aw();if(aI>=aJ){clearInterval(S);S=null;aM(aG,aN);if(aR){aR()}}else{aM(aG,aO+aK((aI-aH)/aL)*aP)}},10)}function aB(){aa.style.height=Q.getWindowSize("Height")+"px";aa.style.width=Q.getWindowSize("Width")+"px"}function aE(){aa.style.top=document.documentElement.scrollTop+"px";aa.style.left=document.documentElement.scrollLeft+"px"}function ay(K){if(K){aF(Y,function(S,aG){aG[0].style.visibility=aG[1]||""})}else{Y=[];aF(Q.options.troubleElements,function(aG,S){aF(document.getElementsByTagName(S),function(aH,aI){Y.push([aI,aI.style.visibility]);aI.style.visibility="hidden"})})}}function r(aG,K){var S=ad("sb-nav-"+aG);if(S){S.style.display=K?"":"none"}}function ah(K,aJ){var aI=ad("sb-loading"),aG=Q.getCurrent().player,aH=(aG=="img"||aG=="html");if(K){Q.setOpacity(aI,0);aI.style.display="block";var S=function(){Q.clearOpacity(aI);if(aJ){aJ()}};if(aH){N(aI,"opacity",1,Q.options.fadeDuration,S)}else{S()}}else{var S=function(){aI.style.display="none";Q.clearOpacity(aI);if(aJ){aJ()}};if(aH){N(aI,"opacity",0,Q.options.fadeDuration,S)}else{S()}}}function t(aO){var aJ=Q.getCurrent();ad("sb-title-inner").innerHTML=aJ.title||"";var aP,aL,S,aQ,aM;if(Q.options.displayNav){aP=true;var aN=Q.gallery.length;if(aN>1){if(Q.options.continuous){aL=aM=true}else{aL=(aN-1)>Q.current;aM=Q.current>0}}if(Q.options.slideshowDelay>0&&Q.hasNext()){aQ=!Q.isPaused();S=!aQ}}else{aP=aL=S=aQ=aM=false}r("close",aP);r("next",aL);r("play",S);r("pause",aQ);r("previous",aM);var K="";if(Q.options.displayCounter&&Q.gallery.length>1){var aN=Q.gallery.length;if(Q.options.counterType=="skip"){var aI=0,aH=aN,aG=parseInt(Q.options.counterLimit)||0;if(aG<aN&&aG>2){var aK=Math.floor(aG/2);aI=Q.current-aK;if(aI<0){aI+=aN}aH=Q.current+(aG-aK);if(aH>aN){aH-=aN}}while(aI!=aH){if(aI==aN){aI=0}K+='<a onclick="Shadowbox.change('+aI+');"';if(aI==Q.current){K+=' class="sb-counter-current"'}K+=">"+(++aI)+"</a>"}}else{K=[Q.current+1,Q.lang.of,aN].join(" ")}}ad("sb-counter").innerHTML=K;aO()}function U(aH){var K=ad("sb-title-inner"),aG=ad("sb-info-inner"),S=0.35;K.style.visibility=aG.style.visibility="";if(K.innerHTML!=""){N(K,"marginTop",0,S)}N(aG,"marginTop",0,S,aH)}function av(aG,aM){var aK=ad("sb-title"),K=ad("sb-info"),aH=aK.offsetHeight,aI=K.offsetHeight,aJ=ad("sb-title-inner"),aL=ad("sb-info-inner"),S=(aG?0.35:0);N(aJ,"marginTop",aH,S);N(aL,"marginTop",aI*-1,S,function(){aJ.style.visibility=aL.style.visibility="hidden";aM()})}function ac(K,aH,S,aJ){var aI=ad("sb-wrapper-inner"),aG=(S?Q.options.resizeDuration:0);N(Z,"top",aH,aG);N(aI,"height",K,aG,aJ)}function ar(K,aH,S,aI){var aG=(S?Q.options.resizeDuration:0);N(Z,"left",aH,aG);N(Z,"width",K,aG,aI)}function ak(aM,aG){var aI=ad("sb-body-inner"),aM=parseInt(aM),aG=parseInt(aG),S=Z.offsetHeight-aI.offsetHeight,K=Z.offsetWidth-aI.offsetWidth,aK=ae.offsetHeight,aL=ae.offsetWidth,aJ=parseInt(Q.options.viewportPadding)||20,aH=(Q.player&&Q.options.handleOversize!="drag");return Q.setDimensions(aM,aG,aK,aL,S,K,aJ,aH)}var T={};T.markup='<div id="sb-container"><div id="sb-overlay"></div><div id="sb-wrapper"><div id="sb-title"><div id="sb-title-inner"></div></div><div id="sb-wrapper-inner"><div id="sb-body"><div id="sb-body-inner"></div><div id="sb-loading"><div id="sb-loading-inner"><span>{loading}</span></div></div></div></div><div id="sb-info"><div id="sb-info-inner"><div id="sb-counter"></div><div id="sb-nav"><a id="sb-nav-close" title="{close}" onclick="Shadowbox.close()"></a><a id="sb-nav-next" title="{next}" onclick="Shadowbox.next()"></a><a id="sb-nav-play" title="{play}" onclick="Shadowbox.play()"></a><a id="sb-nav-pause" title="{pause}" onclick="Shadowbox.pause()"></a><a id="sb-nav-previous" title="{previous}" onclick="Shadowbox.previous()"></a></div></div></div></div></div>';T.options={animSequence:"sync",counterLimit:10,counterType:"default",displayCounter:true,displayNav:true,fadeDuration:0.35,initialHeight:160,initialWidth:320,modal:false,overlayColor:"#000",overlayOpacity:0.5,resizeDuration:0.35,showOverlay:true,troubleElements:["select","object","embed","canvas"]};T.init=function(){Q.appendHTML(document.body,s(T.markup,Q.lang));T.body=ad("sb-body-inner");aa=ad("sb-container");ae=ad("sb-overlay");Z=ad("sb-wrapper");if(!x){aa.style.position="absolute"}if(!h){var aG,K,S=/url\("(.*\.png)"\)/;aF(q,function(aI,aJ){aG=ad(aJ);if(aG){K=Q.getStyle(aG,"backgroundImage").match(S);if(K){aG.style.backgroundImage="none";aG.style.filter="progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true,src="+K[1]+",sizingMethod=scale);"}}})}var aH;F(au,"resize",function(){if(aH){clearTimeout(aH);aH=null}if(A){aH=setTimeout(T.onWindowResize,10)}})};T.onOpen=function(K,aG){m=false;aa.style.display="block";aB();var S=ak(Q.options.initialHeight,Q.options.initialWidth);ac(S.innerHeight,S.top);ar(S.width,S.left);if(Q.options.showOverlay){ae.style.backgroundColor=Q.options.overlayColor;Q.setOpacity(ae,0);if(!Q.options.modal){F(ae,"click",Q.close)}ao=true}if(!x){aE();F(au,"scroll",aE)}ay();aa.style.visibility="visible";if(ao){N(ae,"opacity",Q.options.overlayOpacity,Q.options.fadeDuration,aG)}else{aG()}};T.onLoad=function(S,K){ah(true);while(T.body.firstChild){C(T.body.firstChild)}av(S,function(){if(!A){return}if(!S){Z.style.visibility="visible"}t(K)})};T.onReady=function(aH){if(!A){return}var S=Q.player,aG=ak(S.height,S.width);var K=function(){U(aH)};switch(Q.options.animSequence){case"hw":ac(aG.innerHeight,aG.top,true,function(){ar(aG.width,aG.left,true,K)});break;case"wh":ar(aG.width,aG.left,true,function(){ac(aG.innerHeight,aG.top,true,K)});break;default:ar(aG.width,aG.left,true);ac(aG.innerHeight,aG.top,true,K)}};T.onShow=function(K){ah(false,K);m=true};T.onClose=function(){if(!x){M(au,"scroll",aE)}M(ae,"click",Q.close);Z.style.visibility="hidden";var K=function(){aa.style.visibility="hidden";aa.style.display="none";ay(true)};if(ao){N(ae,"opacity",0,Q.options.fadeDuration,K)}else{K()}};T.onPlay=function(){r("play",false);r("pause",true)};T.onPause=function(){r("pause",false);r("play",true)};T.onWindowResize=function(){if(!m){return}aB();var K=Q.player,S=ak(K.height,K.width);ar(S.width,S.left);ac(S.innerHeight,S.top);if(K.onWindowResize){K.onWindowResize()}};Q.skin=T;au.Shadowbox=Q})(window);

/* **********************************************
     Begin bolt.js
********************************************** */


// Don't break on browsers without console.log();
try { console.assert(1); } catch(e) { console = { log: function() {}, assert: function() {} } }

jQuery(function($) {

    // Any link with a class='confirm' gets a confirmation dialog.. 
    $('a.confirm').click(function(){
        return confirm( $(this).data('confirm') );
    }); 



    // For editing content.. 
    if ($('.redactor').is('*')) {
		$('.redactor').redactor({ autoresize: false, css: 'style_bolt.css' });
	}

	// Initialize the Shadowbox shizzle.
	Shadowbox.init({ 
	   animate: true, 
	   overlayColor: "#DDD", 
	   overlayOpacity: 0.7, 
	   viewportPadding: 40
    });
	
    // Show 'dropzone' for jQuery file uploader. 
    // TODO: make it prettier, and distinguish between '.in' and '.hover'.
    $(document).bind('dragover', function (e) {
        var dropZone = $('.dropzone'),
            timeout = window.dropZoneTimeout;
        if (!timeout) {
            dropZone.addClass('in');
        } else {
            clearTimeout(timeout);
        }
        if (e.target === dropZone[0]) {
            dropZone.addClass('hover');
        } else {
            dropZone.removeClass('hover');
        }
        window.dropZoneTimeout = setTimeout(function () {
            window.dropZoneTimeout = null;
            dropZone.removeClass('in hover');
        }, 100);
    });

    // Add Date and Timepickers..
    $(".datepicker").datepicker({ dateFormat: "DD, d MM yy" });

    $.mask.definitions['2']='[0-2]';
    $.mask.definitions['5']='[0-5]';

    $(".timepicker").mask("29:59");

    // initialize 'moment' timestamps..
    if ($('.moment').is('*')) {
        updateMoments();
    }

    // Auto-update the 'latest activity' widget..
    if ($('#latestactivity').is('*')) {
        setTimeout( function(){ updateLatestActivity(); }, 20 * 1000);
    }

	// Hackish fix for an issue on Ipad, where dropdown menus wouldn't be clickable. Hopefully fixed in Bootstrap 2.1.2
    // See https://github.com/twitter/bootstrap/issues/2975
	$('body').on('touchstart.dropdown', '.dropdown-menu', function (e) { e.stopPropagation(); });

});


/**
 *
 * Initialize 'moment' timestamps..
 *
 */
function updateMoments() {

    $('time.moment').each(function(){
        var stamp = moment($(this).attr('datetime'));
        $(this).html( stamp.fromNow() );
    });
    clearTimeout(momentstimeout);
    momentstimeout = setTimeout( function(){ updateMoments(); }, 16 * 1000);

}

var momentstimeout;

/**
 *
 * Auto-update the 'latest activity' widget..
 *
 */
function updateLatestActivity() {

    $.get(path+'latestactivity?nodebug', function(data) {
        $('#latesttemp').html(data);
        updateMoments();
        $('#latestactivity').html( $('#latesttemp').html() );
    });

    setTimeout( function(){ updateLatestActivity(); }, 30 * 1000);

}


/**
 *
 * Bind the file upload when editing content, so it works and stuff
 *
 */
function bindFileUpload(key) {

    // Since jQuery File Upload's 'paramName' option seems to be ignored,
    // it requires the name of the upload input to be "images[]". Which clashes
    // with the non-fancy fallback, so we hackishly set it here. :-/
    $('#fileupload-' + key).attr('name', 'files[]')
        .fileupload({
            dataType: 'json',
            dropZone: $('#dropzone-' + key),
            done: function (e, data) {
                $.each(data.result, function (index, file) {
                    var filename = decodeURI(file.url).replace("/files/", "");
                    $('#field-' + key).val(filename);
                    $('#thumbnail-' + key).html("<img src='" + path + "../thumbs/120x120c/"+encodeURI(filename)+"' width='120' height='120'>");
                    $('#progress-' + key + ' div.bar').css('width', "100%");
                    $('#progress-' + key).removeClass('progress-striped active');
                    window.setTimeout(function(){ $('#progress-' + key).fadeOut('slow'); }, 3000);
                });
            }
        })
        .bind('fileuploadprogress', function (e, data) {
            var progress = Math.round(100 * data._bitrateTimer.loaded / data.files[0].size);
            $('#progress-' + key).show().addClass('progress-striped active');
            $('#progress-' + key + ' div.bar').css('width', progress+"%");
        });
          
    
}


/**
 *
 * Functions for working with the automagic URI/Slug generation.
 *
 */
function makeUri(contenttypeslug, id, usesfield, slugfield, fulluri) {

    $('#'+usesfield).bind('change keyup input', function() {
        var field = $('#'+usesfield).val();
        clearTimeout(makeuritimeout);
        makeuritimeout = setTimeout( function(){ makeUriAjax(field, contenttypeslug, id, usesfield, slugfield, fulluri); }, 200);
    });

}

var makeuritimeout;

function makeUriAjax(field, contenttypeslug, id, usesfield, slugfield, fulluri) {
    $.ajax({
        url: path + 'makeuri',
        type: 'GET',
        data: { title: field, contenttypeslug: contenttypeslug, id: id, fulluri: fulluri },
        success: function(uri) {
            $('#'+slugfield).val(uri);
            $('#show-'+slugfield).html(uri);
        },
        error: function() {
            console.log('failed to get an URI');
        }
    });
}


/**
 *
 * Making the 'video embed filetype work.
 *
 */
function bindVideoEmbed() {


    $('#'+key).bind('change keyup input', function() {

        // oembed endpoint http://api.embed.ly/1/oembed?format=json&callback=:callbackurl=
        var endpoint = "http://api.embed.ly/1/oembed?format=json&url=";
        var url = endpoint + urlencode("http://vimeo.com/36470597");

        console.log('url', url);

        $.getJSON(url, function(data) {
            $('#embedoutput').val(data);
        });


    };

    // oembed endpoint http://api.embed.ly/1/oembed?format=json&callback=:callbackurl=
    var endpoint = "http://api.embed.ly/1/oembed?format=json&url=";
    var url = endpoint + urlencode("http://vimeo.com/36470597");

    console.log('url', url);

    $.getJSON(url, function(data) {
        $('#embedoutput').val(data);
    });

//    $('#embedoutput').val('Tralala');



}

var momentstimeout;
